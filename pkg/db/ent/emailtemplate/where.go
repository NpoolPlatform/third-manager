// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// LangID applies equality check predicate on the "lang_id" field. It's identical to LangIDEQ.
func LangID(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLangID), v))
	})
}

// DefaultToUsername applies equality check predicate on the "default_to_username" field. It's identical to DefaultToUsernameEQ.
func DefaultToUsername(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultToUsername), v))
	})
}

// UsedFor applies equality check predicate on the "used_for" field. It's identical to UsedForEQ.
func UsedFor(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedFor), v))
	})
}

// Sender applies equality check predicate on the "sender" field. It's identical to SenderEQ.
func Sender(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSender), v))
	})
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubject), v))
	})
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// LangIDEQ applies the EQ predicate on the "lang_id" field.
func LangIDEQ(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLangID), v))
	})
}

// LangIDNEQ applies the NEQ predicate on the "lang_id" field.
func LangIDNEQ(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLangID), v))
	})
}

// LangIDIn applies the In predicate on the "lang_id" field.
func LangIDIn(vs ...uuid.UUID) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLangID), v...))
	})
}

// LangIDNotIn applies the NotIn predicate on the "lang_id" field.
func LangIDNotIn(vs ...uuid.UUID) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLangID), v...))
	})
}

// LangIDGT applies the GT predicate on the "lang_id" field.
func LangIDGT(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLangID), v))
	})
}

// LangIDGTE applies the GTE predicate on the "lang_id" field.
func LangIDGTE(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLangID), v))
	})
}

// LangIDLT applies the LT predicate on the "lang_id" field.
func LangIDLT(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLangID), v))
	})
}

// LangIDLTE applies the LTE predicate on the "lang_id" field.
func LangIDLTE(v uuid.UUID) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLangID), v))
	})
}

// DefaultToUsernameEQ applies the EQ predicate on the "default_to_username" field.
func DefaultToUsernameEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameNEQ applies the NEQ predicate on the "default_to_username" field.
func DefaultToUsernameNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameIn applies the In predicate on the "default_to_username" field.
func DefaultToUsernameIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDefaultToUsername), v...))
	})
}

// DefaultToUsernameNotIn applies the NotIn predicate on the "default_to_username" field.
func DefaultToUsernameNotIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDefaultToUsername), v...))
	})
}

// DefaultToUsernameGT applies the GT predicate on the "default_to_username" field.
func DefaultToUsernameGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameGTE applies the GTE predicate on the "default_to_username" field.
func DefaultToUsernameGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameLT applies the LT predicate on the "default_to_username" field.
func DefaultToUsernameLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameLTE applies the LTE predicate on the "default_to_username" field.
func DefaultToUsernameLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameContains applies the Contains predicate on the "default_to_username" field.
func DefaultToUsernameContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameHasPrefix applies the HasPrefix predicate on the "default_to_username" field.
func DefaultToUsernameHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameHasSuffix applies the HasSuffix predicate on the "default_to_username" field.
func DefaultToUsernameHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameEqualFold applies the EqualFold predicate on the "default_to_username" field.
func DefaultToUsernameEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultToUsername), v))
	})
}

// DefaultToUsernameContainsFold applies the ContainsFold predicate on the "default_to_username" field.
func DefaultToUsernameContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultToUsername), v))
	})
}

// UsedForEQ applies the EQ predicate on the "used_for" field.
func UsedForEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedFor), v))
	})
}

// UsedForNEQ applies the NEQ predicate on the "used_for" field.
func UsedForNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsedFor), v))
	})
}

// UsedForIn applies the In predicate on the "used_for" field.
func UsedForIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsedFor), v...))
	})
}

// UsedForNotIn applies the NotIn predicate on the "used_for" field.
func UsedForNotIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsedFor), v...))
	})
}

// UsedForGT applies the GT predicate on the "used_for" field.
func UsedForGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsedFor), v))
	})
}

// UsedForGTE applies the GTE predicate on the "used_for" field.
func UsedForGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsedFor), v))
	})
}

// UsedForLT applies the LT predicate on the "used_for" field.
func UsedForLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsedFor), v))
	})
}

// UsedForLTE applies the LTE predicate on the "used_for" field.
func UsedForLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsedFor), v))
	})
}

// UsedForContains applies the Contains predicate on the "used_for" field.
func UsedForContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsedFor), v))
	})
}

// UsedForHasPrefix applies the HasPrefix predicate on the "used_for" field.
func UsedForHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsedFor), v))
	})
}

// UsedForHasSuffix applies the HasSuffix predicate on the "used_for" field.
func UsedForHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsedFor), v))
	})
}

// UsedForIsNil applies the IsNil predicate on the "used_for" field.
func UsedForIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsedFor)))
	})
}

// UsedForNotNil applies the NotNil predicate on the "used_for" field.
func UsedForNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsedFor)))
	})
}

// UsedForEqualFold applies the EqualFold predicate on the "used_for" field.
func UsedForEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsedFor), v))
	})
}

// UsedForContainsFold applies the ContainsFold predicate on the "used_for" field.
func UsedForContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsedFor), v))
	})
}

// SenderEQ applies the EQ predicate on the "sender" field.
func SenderEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSender), v))
	})
}

// SenderNEQ applies the NEQ predicate on the "sender" field.
func SenderNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSender), v))
	})
}

// SenderIn applies the In predicate on the "sender" field.
func SenderIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSender), v...))
	})
}

// SenderNotIn applies the NotIn predicate on the "sender" field.
func SenderNotIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSender), v...))
	})
}

// SenderGT applies the GT predicate on the "sender" field.
func SenderGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSender), v))
	})
}

// SenderGTE applies the GTE predicate on the "sender" field.
func SenderGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSender), v))
	})
}

// SenderLT applies the LT predicate on the "sender" field.
func SenderLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSender), v))
	})
}

// SenderLTE applies the LTE predicate on the "sender" field.
func SenderLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSender), v))
	})
}

// SenderContains applies the Contains predicate on the "sender" field.
func SenderContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSender), v))
	})
}

// SenderHasPrefix applies the HasPrefix predicate on the "sender" field.
func SenderHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSender), v))
	})
}

// SenderHasSuffix applies the HasSuffix predicate on the "sender" field.
func SenderHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSender), v))
	})
}

// SenderIsNil applies the IsNil predicate on the "sender" field.
func SenderIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSender)))
	})
}

// SenderNotNil applies the NotNil predicate on the "sender" field.
func SenderNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSender)))
	})
}

// SenderEqualFold applies the EqualFold predicate on the "sender" field.
func SenderEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSender), v))
	})
}

// SenderContainsFold applies the ContainsFold predicate on the "sender" field.
func SenderContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSender), v))
	})
}

// ReplyTosIsNil applies the IsNil predicate on the "reply_tos" field.
func ReplyTosIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReplyTos)))
	})
}

// ReplyTosNotNil applies the NotNil predicate on the "reply_tos" field.
func ReplyTosNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReplyTos)))
	})
}

// CcTosIsNil applies the IsNil predicate on the "cc_tos" field.
func CcTosIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCcTos)))
	})
}

// CcTosNotNil applies the NotNil predicate on the "cc_tos" field.
func CcTosNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCcTos)))
	})
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubject), v))
	})
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubject), v))
	})
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubject), v...))
	})
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubject), v...))
	})
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubject), v))
	})
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubject), v))
	})
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubject), v))
	})
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubject), v))
	})
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubject), v))
	})
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubject), v))
	})
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubject), v))
	})
}

// SubjectIsNil applies the IsNil predicate on the "subject" field.
func SubjectIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubject)))
	})
}

// SubjectNotNil applies the NotNil predicate on the "subject" field.
func SubjectNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubject)))
	})
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubject), v))
	})
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubject), v))
	})
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBody), v))
	})
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBody), v...))
	})
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.EmailTemplate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBody), v...))
	})
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBody), v))
	})
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBody), v))
	})
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBody), v))
	})
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBody), v))
	})
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBody), v))
	})
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBody), v))
	})
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBody), v))
	})
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBody)))
	})
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBody)))
	})
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBody), v))
	})
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBody), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		p(s.Not())
	})
}
