// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/appemailtemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppEmailTemplateUpdate is the builder for updating AppEmailTemplate entities.
type AppEmailTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *AppEmailTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppEmailTemplateUpdate builder.
func (aetu *AppEmailTemplateUpdate) Where(ps ...predicate.AppEmailTemplate) *AppEmailTemplateUpdate {
	aetu.mutation.Where(ps...)
	return aetu
}

// SetAppID sets the "app_id" field.
func (aetu *AppEmailTemplateUpdate) SetAppID(u uuid.UUID) *AppEmailTemplateUpdate {
	aetu.mutation.SetAppID(u)
	return aetu
}

// SetLangID sets the "lang_id" field.
func (aetu *AppEmailTemplateUpdate) SetLangID(u uuid.UUID) *AppEmailTemplateUpdate {
	aetu.mutation.SetLangID(u)
	return aetu
}

// SetDefaultToUsername sets the "default_to_username" field.
func (aetu *AppEmailTemplateUpdate) SetDefaultToUsername(s string) *AppEmailTemplateUpdate {
	aetu.mutation.SetDefaultToUsername(s)
	return aetu
}

// SetUsedFor sets the "used_for" field.
func (aetu *AppEmailTemplateUpdate) SetUsedFor(s string) *AppEmailTemplateUpdate {
	aetu.mutation.SetUsedFor(s)
	return aetu
}

// SetSender sets the "sender" field.
func (aetu *AppEmailTemplateUpdate) SetSender(s string) *AppEmailTemplateUpdate {
	aetu.mutation.SetSender(s)
	return aetu
}

// SetReplyTos sets the "reply_tos" field.
func (aetu *AppEmailTemplateUpdate) SetReplyTos(s []string) *AppEmailTemplateUpdate {
	aetu.mutation.SetReplyTos(s)
	return aetu
}

// SetCcTos sets the "cc_tos" field.
func (aetu *AppEmailTemplateUpdate) SetCcTos(s []string) *AppEmailTemplateUpdate {
	aetu.mutation.SetCcTos(s)
	return aetu
}

// SetSubject sets the "subject" field.
func (aetu *AppEmailTemplateUpdate) SetSubject(s string) *AppEmailTemplateUpdate {
	aetu.mutation.SetSubject(s)
	return aetu
}

// SetBody sets the "body" field.
func (aetu *AppEmailTemplateUpdate) SetBody(s string) *AppEmailTemplateUpdate {
	aetu.mutation.SetBody(s)
	return aetu
}

// SetCreateAt sets the "create_at" field.
func (aetu *AppEmailTemplateUpdate) SetCreateAt(u uint32) *AppEmailTemplateUpdate {
	aetu.mutation.ResetCreateAt()
	aetu.mutation.SetCreateAt(u)
	return aetu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aetu *AppEmailTemplateUpdate) SetNillableCreateAt(u *uint32) *AppEmailTemplateUpdate {
	if u != nil {
		aetu.SetCreateAt(*u)
	}
	return aetu
}

// AddCreateAt adds u to the "create_at" field.
func (aetu *AppEmailTemplateUpdate) AddCreateAt(u int32) *AppEmailTemplateUpdate {
	aetu.mutation.AddCreateAt(u)
	return aetu
}

// SetUpdateAt sets the "update_at" field.
func (aetu *AppEmailTemplateUpdate) SetUpdateAt(u uint32) *AppEmailTemplateUpdate {
	aetu.mutation.ResetUpdateAt()
	aetu.mutation.SetUpdateAt(u)
	return aetu
}

// AddUpdateAt adds u to the "update_at" field.
func (aetu *AppEmailTemplateUpdate) AddUpdateAt(u int32) *AppEmailTemplateUpdate {
	aetu.mutation.AddUpdateAt(u)
	return aetu
}

// Mutation returns the AppEmailTemplateMutation object of the builder.
func (aetu *AppEmailTemplateUpdate) Mutation() *AppEmailTemplateMutation {
	return aetu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aetu *AppEmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aetu.defaults()
	if len(aetu.hooks) == 0 {
		if err = aetu.check(); err != nil {
			return 0, err
		}
		affected, err = aetu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppEmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aetu.check(); err != nil {
				return 0, err
			}
			aetu.mutation = mutation
			affected, err = aetu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aetu.hooks) - 1; i >= 0; i-- {
			if aetu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aetu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aetu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aetu *AppEmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := aetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aetu *AppEmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := aetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aetu *AppEmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := aetu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aetu *AppEmailTemplateUpdate) defaults() {
	if _, ok := aetu.mutation.UpdateAt(); !ok {
		v := appemailtemplate.UpdateDefaultUpdateAt()
		aetu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aetu *AppEmailTemplateUpdate) check() error {
	if v, ok := aetu.mutation.Body(); ok {
		if err := appemailtemplate.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "AppEmailTemplate.body": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aetu *AppEmailTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppEmailTemplateUpdate {
	aetu.modifiers = append(aetu.modifiers, modifiers...)
	return aetu
}

func (aetu *AppEmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appemailtemplate.Table,
			Columns: appemailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appemailtemplate.FieldID,
			},
		},
	}
	if ps := aetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aetu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appemailtemplate.FieldAppID,
		})
	}
	if value, ok := aetu.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appemailtemplate.FieldLangID,
		})
	}
	if value, ok := aetu.mutation.DefaultToUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldDefaultToUsername,
		})
	}
	if value, ok := aetu.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldUsedFor,
		})
	}
	if value, ok := aetu.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldSender,
		})
	}
	if value, ok := aetu.mutation.ReplyTos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appemailtemplate.FieldReplyTos,
		})
	}
	if value, ok := aetu.mutation.CcTos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appemailtemplate.FieldCcTos,
		})
	}
	if value, ok := aetu.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldSubject,
		})
	}
	if value, ok := aetu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldBody,
		})
	}
	if value, ok := aetu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldCreateAt,
		})
	}
	if value, ok := aetu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldCreateAt,
		})
	}
	if value, ok := aetu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldUpdateAt,
		})
	}
	if value, ok := aetu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldUpdateAt,
		})
	}
	_spec.Modifiers = aetu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, aetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appemailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppEmailTemplateUpdateOne is the builder for updating a single AppEmailTemplate entity.
type AppEmailTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppEmailTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAppID sets the "app_id" field.
func (aetuo *AppEmailTemplateUpdateOne) SetAppID(u uuid.UUID) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetAppID(u)
	return aetuo
}

// SetLangID sets the "lang_id" field.
func (aetuo *AppEmailTemplateUpdateOne) SetLangID(u uuid.UUID) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetLangID(u)
	return aetuo
}

// SetDefaultToUsername sets the "default_to_username" field.
func (aetuo *AppEmailTemplateUpdateOne) SetDefaultToUsername(s string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetDefaultToUsername(s)
	return aetuo
}

// SetUsedFor sets the "used_for" field.
func (aetuo *AppEmailTemplateUpdateOne) SetUsedFor(s string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetUsedFor(s)
	return aetuo
}

// SetSender sets the "sender" field.
func (aetuo *AppEmailTemplateUpdateOne) SetSender(s string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetSender(s)
	return aetuo
}

// SetReplyTos sets the "reply_tos" field.
func (aetuo *AppEmailTemplateUpdateOne) SetReplyTos(s []string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetReplyTos(s)
	return aetuo
}

// SetCcTos sets the "cc_tos" field.
func (aetuo *AppEmailTemplateUpdateOne) SetCcTos(s []string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetCcTos(s)
	return aetuo
}

// SetSubject sets the "subject" field.
func (aetuo *AppEmailTemplateUpdateOne) SetSubject(s string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetSubject(s)
	return aetuo
}

// SetBody sets the "body" field.
func (aetuo *AppEmailTemplateUpdateOne) SetBody(s string) *AppEmailTemplateUpdateOne {
	aetuo.mutation.SetBody(s)
	return aetuo
}

// SetCreateAt sets the "create_at" field.
func (aetuo *AppEmailTemplateUpdateOne) SetCreateAt(u uint32) *AppEmailTemplateUpdateOne {
	aetuo.mutation.ResetCreateAt()
	aetuo.mutation.SetCreateAt(u)
	return aetuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aetuo *AppEmailTemplateUpdateOne) SetNillableCreateAt(u *uint32) *AppEmailTemplateUpdateOne {
	if u != nil {
		aetuo.SetCreateAt(*u)
	}
	return aetuo
}

// AddCreateAt adds u to the "create_at" field.
func (aetuo *AppEmailTemplateUpdateOne) AddCreateAt(u int32) *AppEmailTemplateUpdateOne {
	aetuo.mutation.AddCreateAt(u)
	return aetuo
}

// SetUpdateAt sets the "update_at" field.
func (aetuo *AppEmailTemplateUpdateOne) SetUpdateAt(u uint32) *AppEmailTemplateUpdateOne {
	aetuo.mutation.ResetUpdateAt()
	aetuo.mutation.SetUpdateAt(u)
	return aetuo
}

// AddUpdateAt adds u to the "update_at" field.
func (aetuo *AppEmailTemplateUpdateOne) AddUpdateAt(u int32) *AppEmailTemplateUpdateOne {
	aetuo.mutation.AddUpdateAt(u)
	return aetuo
}

// Mutation returns the AppEmailTemplateMutation object of the builder.
func (aetuo *AppEmailTemplateUpdateOne) Mutation() *AppEmailTemplateMutation {
	return aetuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aetuo *AppEmailTemplateUpdateOne) Select(field string, fields ...string) *AppEmailTemplateUpdateOne {
	aetuo.fields = append([]string{field}, fields...)
	return aetuo
}

// Save executes the query and returns the updated AppEmailTemplate entity.
func (aetuo *AppEmailTemplateUpdateOne) Save(ctx context.Context) (*AppEmailTemplate, error) {
	var (
		err  error
		node *AppEmailTemplate
	)
	aetuo.defaults()
	if len(aetuo.hooks) == 0 {
		if err = aetuo.check(); err != nil {
			return nil, err
		}
		node, err = aetuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppEmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aetuo.check(); err != nil {
				return nil, err
			}
			aetuo.mutation = mutation
			node, err = aetuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aetuo.hooks) - 1; i >= 0; i-- {
			if aetuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aetuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aetuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppEmailTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppEmailTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aetuo *AppEmailTemplateUpdateOne) SaveX(ctx context.Context) *AppEmailTemplate {
	node, err := aetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aetuo *AppEmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := aetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aetuo *AppEmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := aetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aetuo *AppEmailTemplateUpdateOne) defaults() {
	if _, ok := aetuo.mutation.UpdateAt(); !ok {
		v := appemailtemplate.UpdateDefaultUpdateAt()
		aetuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aetuo *AppEmailTemplateUpdateOne) check() error {
	if v, ok := aetuo.mutation.Body(); ok {
		if err := appemailtemplate.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "AppEmailTemplate.body": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aetuo *AppEmailTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppEmailTemplateUpdateOne {
	aetuo.modifiers = append(aetuo.modifiers, modifiers...)
	return aetuo
}

func (aetuo *AppEmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *AppEmailTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appemailtemplate.Table,
			Columns: appemailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appemailtemplate.FieldID,
			},
		},
	}
	id, ok := aetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppEmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appemailtemplate.FieldID)
		for _, f := range fields {
			if !appemailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appemailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aetuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appemailtemplate.FieldAppID,
		})
	}
	if value, ok := aetuo.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appemailtemplate.FieldLangID,
		})
	}
	if value, ok := aetuo.mutation.DefaultToUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldDefaultToUsername,
		})
	}
	if value, ok := aetuo.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldUsedFor,
		})
	}
	if value, ok := aetuo.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldSender,
		})
	}
	if value, ok := aetuo.mutation.ReplyTos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appemailtemplate.FieldReplyTos,
		})
	}
	if value, ok := aetuo.mutation.CcTos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appemailtemplate.FieldCcTos,
		})
	}
	if value, ok := aetuo.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldSubject,
		})
	}
	if value, ok := aetuo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldBody,
		})
	}
	if value, ok := aetuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldCreateAt,
		})
	}
	if value, ok := aetuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldCreateAt,
		})
	}
	if value, ok := aetuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldUpdateAt,
		})
	}
	if value, ok := aetuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldUpdateAt,
		})
	}
	_spec.Modifiers = aetuo.modifiers
	_node = &AppEmailTemplate{config: aetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appemailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
