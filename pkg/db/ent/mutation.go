// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/third-manager/pkg/db/ent/appcontact"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/appemailtemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/appsmstemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppContact       = "AppContact"
	TypeAppEmailTemplate = "AppEmailTemplate"
	TypeAppSMSTemplate   = "AppSMSTemplate"
)

// AppContactMutation represents an operation that mutates the AppContact nodes in the graph.
type AppContactMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	used_for      *string
	sender        *string
	account       *string
	account_type  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AppContact, error)
	predicates    []predicate.AppContact
}

var _ ent.Mutation = (*AppContactMutation)(nil)

// appcontactOption allows management of the mutation configuration using functional options.
type appcontactOption func(*AppContactMutation)

// newAppContactMutation creates new mutation for the AppContact entity.
func newAppContactMutation(c config, op Op, opts ...appcontactOption) *AppContactMutation {
	m := &AppContactMutation{
		config:        c,
		op:            op,
		typ:           TypeAppContact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppContactID sets the ID field of the mutation.
func withAppContactID(id uuid.UUID) appcontactOption {
	return func(m *AppContactMutation) {
		var (
			err   error
			once  sync.Once
			value *AppContact
		)
		m.oldValue = func(ctx context.Context) (*AppContact, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppContact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppContact sets the old AppContact of the mutation.
func withAppContact(node *AppContact) appcontactOption {
	return func(m *AppContactMutation) {
		m.oldValue = func(context.Context) (*AppContact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppContactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppContactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppContact entities.
func (m *AppContactMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppContactMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppContactMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppContact.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppContactMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppContactMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AppContactMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AppContactMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppContactMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppContactMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppContactMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AppContactMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AppContactMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppContactMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AppContactMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AppContactMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AppContactMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AppContactMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AppContactMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *AppContactMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppContactMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppContactMutation) ResetAppID() {
	m.app_id = nil
}

// SetUsedFor sets the "used_for" field.
func (m *AppContactMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *AppContactMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *AppContactMutation) ResetUsedFor() {
	m.used_for = nil
}

// SetSender sets the "sender" field.
func (m *AppContactMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *AppContactMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ResetSender resets all changes to the "sender" field.
func (m *AppContactMutation) ResetSender() {
	m.sender = nil
}

// SetAccount sets the "account" field.
func (m *AppContactMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *AppContactMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *AppContactMutation) ResetAccount() {
	m.account = nil
}

// SetAccountType sets the "account_type" field.
func (m *AppContactMutation) SetAccountType(s string) {
	m.account_type = &s
}

// AccountType returns the value of the "account_type" field in the mutation.
func (m *AppContactMutation) AccountType() (r string, exists bool) {
	v := m.account_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountType returns the old "account_type" field's value of the AppContact entity.
// If the AppContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppContactMutation) OldAccountType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountType: %w", err)
	}
	return oldValue.AccountType, nil
}

// ResetAccountType resets all changes to the "account_type" field.
func (m *AppContactMutation) ResetAccountType() {
	m.account_type = nil
}

// Where appends a list predicates to the AppContactMutation builder.
func (m *AppContactMutation) Where(ps ...predicate.AppContact) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppContactMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppContact).
func (m *AppContactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppContactMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, appcontact.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appcontact.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, appcontact.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, appcontact.FieldAppID)
	}
	if m.used_for != nil {
		fields = append(fields, appcontact.FieldUsedFor)
	}
	if m.sender != nil {
		fields = append(fields, appcontact.FieldSender)
	}
	if m.account != nil {
		fields = append(fields, appcontact.FieldAccount)
	}
	if m.account_type != nil {
		fields = append(fields, appcontact.FieldAccountType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppContactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appcontact.FieldCreatedAt:
		return m.CreatedAt()
	case appcontact.FieldUpdatedAt:
		return m.UpdatedAt()
	case appcontact.FieldDeletedAt:
		return m.DeletedAt()
	case appcontact.FieldAppID:
		return m.AppID()
	case appcontact.FieldUsedFor:
		return m.UsedFor()
	case appcontact.FieldSender:
		return m.Sender()
	case appcontact.FieldAccount:
		return m.Account()
	case appcontact.FieldAccountType:
		return m.AccountType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppContactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appcontact.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appcontact.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appcontact.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case appcontact.FieldAppID:
		return m.OldAppID(ctx)
	case appcontact.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case appcontact.FieldSender:
		return m.OldSender(ctx)
	case appcontact.FieldAccount:
		return m.OldAccount(ctx)
	case appcontact.FieldAccountType:
		return m.OldAccountType(ctx)
	}
	return nil, fmt.Errorf("unknown AppContact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppContactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appcontact.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appcontact.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appcontact.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case appcontact.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appcontact.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case appcontact.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case appcontact.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case appcontact.FieldAccountType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountType(v)
		return nil
	}
	return fmt.Errorf("unknown AppContact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppContactMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, appcontact.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, appcontact.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, appcontact.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppContactMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appcontact.FieldCreatedAt:
		return m.AddedCreatedAt()
	case appcontact.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case appcontact.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppContactMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appcontact.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case appcontact.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case appcontact.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppContact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppContactMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppContactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppContactMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppContact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppContactMutation) ResetField(name string) error {
	switch name {
	case appcontact.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appcontact.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appcontact.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case appcontact.FieldAppID:
		m.ResetAppID()
		return nil
	case appcontact.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case appcontact.FieldSender:
		m.ResetSender()
		return nil
	case appcontact.FieldAccount:
		m.ResetAccount()
		return nil
	case appcontact.FieldAccountType:
		m.ResetAccountType()
		return nil
	}
	return fmt.Errorf("unknown AppContact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppContactMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppContactMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppContactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppContactMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppContactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppContactMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppContactMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppContact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppContactMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppContact edge %s", name)
}

// AppEmailTemplateMutation represents an operation that mutates the AppEmailTemplate nodes in the graph.
type AppEmailTemplateMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	app_id              *uuid.UUID
	lang_id             *uuid.UUID
	default_to_username *string
	used_for            *string
	sender              *string
	reply_tos           *[]string
	cc_tos              *[]string
	subject             *string
	body                *string
	create_at           *uint32
	addcreate_at        *int32
	update_at           *uint32
	addupdate_at        *int32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*AppEmailTemplate, error)
	predicates          []predicate.AppEmailTemplate
}

var _ ent.Mutation = (*AppEmailTemplateMutation)(nil)

// appemailtemplateOption allows management of the mutation configuration using functional options.
type appemailtemplateOption func(*AppEmailTemplateMutation)

// newAppEmailTemplateMutation creates new mutation for the AppEmailTemplate entity.
func newAppEmailTemplateMutation(c config, op Op, opts ...appemailtemplateOption) *AppEmailTemplateMutation {
	m := &AppEmailTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeAppEmailTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppEmailTemplateID sets the ID field of the mutation.
func withAppEmailTemplateID(id uuid.UUID) appemailtemplateOption {
	return func(m *AppEmailTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *AppEmailTemplate
		)
		m.oldValue = func(ctx context.Context) (*AppEmailTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppEmailTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppEmailTemplate sets the old AppEmailTemplate of the mutation.
func withAppEmailTemplate(node *AppEmailTemplate) appemailtemplateOption {
	return func(m *AppEmailTemplateMutation) {
		m.oldValue = func(context.Context) (*AppEmailTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppEmailTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppEmailTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppEmailTemplate entities.
func (m *AppEmailTemplateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppEmailTemplateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppEmailTemplateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppEmailTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppEmailTemplateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppEmailTemplateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppEmailTemplateMutation) ResetAppID() {
	m.app_id = nil
}

// SetLangID sets the "lang_id" field.
func (m *AppEmailTemplateMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *AppEmailTemplateMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *AppEmailTemplateMutation) ResetLangID() {
	m.lang_id = nil
}

// SetDefaultToUsername sets the "default_to_username" field.
func (m *AppEmailTemplateMutation) SetDefaultToUsername(s string) {
	m.default_to_username = &s
}

// DefaultToUsername returns the value of the "default_to_username" field in the mutation.
func (m *AppEmailTemplateMutation) DefaultToUsername() (r string, exists bool) {
	v := m.default_to_username
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultToUsername returns the old "default_to_username" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldDefaultToUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultToUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultToUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultToUsername: %w", err)
	}
	return oldValue.DefaultToUsername, nil
}

// ResetDefaultToUsername resets all changes to the "default_to_username" field.
func (m *AppEmailTemplateMutation) ResetDefaultToUsername() {
	m.default_to_username = nil
}

// SetUsedFor sets the "used_for" field.
func (m *AppEmailTemplateMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *AppEmailTemplateMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *AppEmailTemplateMutation) ResetUsedFor() {
	m.used_for = nil
}

// SetSender sets the "sender" field.
func (m *AppEmailTemplateMutation) SetSender(s string) {
	m.sender = &s
}

// Sender returns the value of the "sender" field in the mutation.
func (m *AppEmailTemplateMutation) Sender() (r string, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSender returns the old "sender" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldSender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSender: %w", err)
	}
	return oldValue.Sender, nil
}

// ResetSender resets all changes to the "sender" field.
func (m *AppEmailTemplateMutation) ResetSender() {
	m.sender = nil
}

// SetReplyTos sets the "reply_tos" field.
func (m *AppEmailTemplateMutation) SetReplyTos(s []string) {
	m.reply_tos = &s
}

// ReplyTos returns the value of the "reply_tos" field in the mutation.
func (m *AppEmailTemplateMutation) ReplyTos() (r []string, exists bool) {
	v := m.reply_tos
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyTos returns the old "reply_tos" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldReplyTos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplyTos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplyTos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyTos: %w", err)
	}
	return oldValue.ReplyTos, nil
}

// ResetReplyTos resets all changes to the "reply_tos" field.
func (m *AppEmailTemplateMutation) ResetReplyTos() {
	m.reply_tos = nil
}

// SetCcTos sets the "cc_tos" field.
func (m *AppEmailTemplateMutation) SetCcTos(s []string) {
	m.cc_tos = &s
}

// CcTos returns the value of the "cc_tos" field in the mutation.
func (m *AppEmailTemplateMutation) CcTos() (r []string, exists bool) {
	v := m.cc_tos
	if v == nil {
		return
	}
	return *v, true
}

// OldCcTos returns the old "cc_tos" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldCcTos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCcTos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCcTos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCcTos: %w", err)
	}
	return oldValue.CcTos, nil
}

// ResetCcTos resets all changes to the "cc_tos" field.
func (m *AppEmailTemplateMutation) ResetCcTos() {
	m.cc_tos = nil
}

// SetSubject sets the "subject" field.
func (m *AppEmailTemplateMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *AppEmailTemplateMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *AppEmailTemplateMutation) ResetSubject() {
	m.subject = nil
}

// SetBody sets the "body" field.
func (m *AppEmailTemplateMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *AppEmailTemplateMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *AppEmailTemplateMutation) ResetBody() {
	m.body = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppEmailTemplateMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppEmailTemplateMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppEmailTemplateMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppEmailTemplateMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppEmailTemplateMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppEmailTemplateMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppEmailTemplateMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppEmailTemplate entity.
// If the AppEmailTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppEmailTemplateMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppEmailTemplateMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppEmailTemplateMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppEmailTemplateMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// Where appends a list predicates to the AppEmailTemplateMutation builder.
func (m *AppEmailTemplateMutation) Where(ps ...predicate.AppEmailTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppEmailTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppEmailTemplate).
func (m *AppEmailTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppEmailTemplateMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.app_id != nil {
		fields = append(fields, appemailtemplate.FieldAppID)
	}
	if m.lang_id != nil {
		fields = append(fields, appemailtemplate.FieldLangID)
	}
	if m.default_to_username != nil {
		fields = append(fields, appemailtemplate.FieldDefaultToUsername)
	}
	if m.used_for != nil {
		fields = append(fields, appemailtemplate.FieldUsedFor)
	}
	if m.sender != nil {
		fields = append(fields, appemailtemplate.FieldSender)
	}
	if m.reply_tos != nil {
		fields = append(fields, appemailtemplate.FieldReplyTos)
	}
	if m.cc_tos != nil {
		fields = append(fields, appemailtemplate.FieldCcTos)
	}
	if m.subject != nil {
		fields = append(fields, appemailtemplate.FieldSubject)
	}
	if m.body != nil {
		fields = append(fields, appemailtemplate.FieldBody)
	}
	if m.create_at != nil {
		fields = append(fields, appemailtemplate.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appemailtemplate.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppEmailTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appemailtemplate.FieldAppID:
		return m.AppID()
	case appemailtemplate.FieldLangID:
		return m.LangID()
	case appemailtemplate.FieldDefaultToUsername:
		return m.DefaultToUsername()
	case appemailtemplate.FieldUsedFor:
		return m.UsedFor()
	case appemailtemplate.FieldSender:
		return m.Sender()
	case appemailtemplate.FieldReplyTos:
		return m.ReplyTos()
	case appemailtemplate.FieldCcTos:
		return m.CcTos()
	case appemailtemplate.FieldSubject:
		return m.Subject()
	case appemailtemplate.FieldBody:
		return m.Body()
	case appemailtemplate.FieldCreateAt:
		return m.CreateAt()
	case appemailtemplate.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppEmailTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appemailtemplate.FieldAppID:
		return m.OldAppID(ctx)
	case appemailtemplate.FieldLangID:
		return m.OldLangID(ctx)
	case appemailtemplate.FieldDefaultToUsername:
		return m.OldDefaultToUsername(ctx)
	case appemailtemplate.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case appemailtemplate.FieldSender:
		return m.OldSender(ctx)
	case appemailtemplate.FieldReplyTos:
		return m.OldReplyTos(ctx)
	case appemailtemplate.FieldCcTos:
		return m.OldCcTos(ctx)
	case appemailtemplate.FieldSubject:
		return m.OldSubject(ctx)
	case appemailtemplate.FieldBody:
		return m.OldBody(ctx)
	case appemailtemplate.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appemailtemplate.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppEmailTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppEmailTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appemailtemplate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appemailtemplate.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case appemailtemplate.FieldDefaultToUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultToUsername(v)
		return nil
	case appemailtemplate.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case appemailtemplate.FieldSender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSender(v)
		return nil
	case appemailtemplate.FieldReplyTos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyTos(v)
		return nil
	case appemailtemplate.FieldCcTos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCcTos(v)
		return nil
	case appemailtemplate.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case appemailtemplate.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case appemailtemplate.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appemailtemplate.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppEmailTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppEmailTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, appemailtemplate.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appemailtemplate.FieldUpdateAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppEmailTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appemailtemplate.FieldCreateAt:
		return m.AddedCreateAt()
	case appemailtemplate.FieldUpdateAt:
		return m.AddedUpdateAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppEmailTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appemailtemplate.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appemailtemplate.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppEmailTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppEmailTemplateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppEmailTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppEmailTemplateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppEmailTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppEmailTemplateMutation) ResetField(name string) error {
	switch name {
	case appemailtemplate.FieldAppID:
		m.ResetAppID()
		return nil
	case appemailtemplate.FieldLangID:
		m.ResetLangID()
		return nil
	case appemailtemplate.FieldDefaultToUsername:
		m.ResetDefaultToUsername()
		return nil
	case appemailtemplate.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case appemailtemplate.FieldSender:
		m.ResetSender()
		return nil
	case appemailtemplate.FieldReplyTos:
		m.ResetReplyTos()
		return nil
	case appemailtemplate.FieldCcTos:
		m.ResetCcTos()
		return nil
	case appemailtemplate.FieldSubject:
		m.ResetSubject()
		return nil
	case appemailtemplate.FieldBody:
		m.ResetBody()
		return nil
	case appemailtemplate.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appemailtemplate.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown AppEmailTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppEmailTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppEmailTemplateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppEmailTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppEmailTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppEmailTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppEmailTemplateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppEmailTemplateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppEmailTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppEmailTemplateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppEmailTemplate edge %s", name)
}

// AppSMSTemplateMutation represents an operation that mutates the AppSMSTemplate nodes in the graph.
type AppSMSTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	lang_id       *uuid.UUID
	used_for      *string
	subject       *string
	message       *string
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AppSMSTemplate, error)
	predicates    []predicate.AppSMSTemplate
}

var _ ent.Mutation = (*AppSMSTemplateMutation)(nil)

// appsmstemplateOption allows management of the mutation configuration using functional options.
type appsmstemplateOption func(*AppSMSTemplateMutation)

// newAppSMSTemplateMutation creates new mutation for the AppSMSTemplate entity.
func newAppSMSTemplateMutation(c config, op Op, opts ...appsmstemplateOption) *AppSMSTemplateMutation {
	m := &AppSMSTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeAppSMSTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppSMSTemplateID sets the ID field of the mutation.
func withAppSMSTemplateID(id uuid.UUID) appsmstemplateOption {
	return func(m *AppSMSTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *AppSMSTemplate
		)
		m.oldValue = func(ctx context.Context) (*AppSMSTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppSMSTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppSMSTemplate sets the old AppSMSTemplate of the mutation.
func withAppSMSTemplate(node *AppSMSTemplate) appsmstemplateOption {
	return func(m *AppSMSTemplateMutation) {
		m.oldValue = func(context.Context) (*AppSMSTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppSMSTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppSMSTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppSMSTemplate entities.
func (m *AppSMSTemplateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppSMSTemplateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppSMSTemplateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppSMSTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppSMSTemplateMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppSMSTemplateMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppSMSTemplateMutation) ResetAppID() {
	m.app_id = nil
}

// SetLangID sets the "lang_id" field.
func (m *AppSMSTemplateMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *AppSMSTemplateMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *AppSMSTemplateMutation) ResetLangID() {
	m.lang_id = nil
}

// SetUsedFor sets the "used_for" field.
func (m *AppSMSTemplateMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *AppSMSTemplateMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *AppSMSTemplateMutation) ResetUsedFor() {
	m.used_for = nil
}

// SetSubject sets the "subject" field.
func (m *AppSMSTemplateMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *AppSMSTemplateMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *AppSMSTemplateMutation) ResetSubject() {
	m.subject = nil
}

// SetMessage sets the "message" field.
func (m *AppSMSTemplateMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *AppSMSTemplateMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *AppSMSTemplateMutation) ResetMessage() {
	m.message = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppSMSTemplateMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppSMSTemplateMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppSMSTemplateMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppSMSTemplateMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppSMSTemplateMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppSMSTemplateMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppSMSTemplateMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppSMSTemplate entity.
// If the AppSMSTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppSMSTemplateMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppSMSTemplateMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppSMSTemplateMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppSMSTemplateMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// Where appends a list predicates to the AppSMSTemplateMutation builder.
func (m *AppSMSTemplateMutation) Where(ps ...predicate.AppSMSTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppSMSTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppSMSTemplate).
func (m *AppSMSTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppSMSTemplateMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.app_id != nil {
		fields = append(fields, appsmstemplate.FieldAppID)
	}
	if m.lang_id != nil {
		fields = append(fields, appsmstemplate.FieldLangID)
	}
	if m.used_for != nil {
		fields = append(fields, appsmstemplate.FieldUsedFor)
	}
	if m.subject != nil {
		fields = append(fields, appsmstemplate.FieldSubject)
	}
	if m.message != nil {
		fields = append(fields, appsmstemplate.FieldMessage)
	}
	if m.create_at != nil {
		fields = append(fields, appsmstemplate.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appsmstemplate.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppSMSTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appsmstemplate.FieldAppID:
		return m.AppID()
	case appsmstemplate.FieldLangID:
		return m.LangID()
	case appsmstemplate.FieldUsedFor:
		return m.UsedFor()
	case appsmstemplate.FieldSubject:
		return m.Subject()
	case appsmstemplate.FieldMessage:
		return m.Message()
	case appsmstemplate.FieldCreateAt:
		return m.CreateAt()
	case appsmstemplate.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppSMSTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appsmstemplate.FieldAppID:
		return m.OldAppID(ctx)
	case appsmstemplate.FieldLangID:
		return m.OldLangID(ctx)
	case appsmstemplate.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case appsmstemplate.FieldSubject:
		return m.OldSubject(ctx)
	case appsmstemplate.FieldMessage:
		return m.OldMessage(ctx)
	case appsmstemplate.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appsmstemplate.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppSMSTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppSMSTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appsmstemplate.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appsmstemplate.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case appsmstemplate.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case appsmstemplate.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case appsmstemplate.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case appsmstemplate.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appsmstemplate.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppSMSTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppSMSTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, appsmstemplate.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appsmstemplate.FieldUpdateAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppSMSTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appsmstemplate.FieldCreateAt:
		return m.AddedCreateAt()
	case appsmstemplate.FieldUpdateAt:
		return m.AddedUpdateAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppSMSTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appsmstemplate.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appsmstemplate.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppSMSTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppSMSTemplateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppSMSTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppSMSTemplateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppSMSTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppSMSTemplateMutation) ResetField(name string) error {
	switch name {
	case appsmstemplate.FieldAppID:
		m.ResetAppID()
		return nil
	case appsmstemplate.FieldLangID:
		m.ResetLangID()
		return nil
	case appsmstemplate.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case appsmstemplate.FieldSubject:
		m.ResetSubject()
		return nil
	case appsmstemplate.FieldMessage:
		m.ResetMessage()
		return nil
	case appsmstemplate.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appsmstemplate.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown AppSMSTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppSMSTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppSMSTemplateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppSMSTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppSMSTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppSMSTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppSMSTemplateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppSMSTemplateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppSMSTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppSMSTemplateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppSMSTemplate edge %s", name)
}
