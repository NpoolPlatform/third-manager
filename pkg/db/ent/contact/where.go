// Code generated by ent, DO NOT EDIT.

package contact

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UsedFor applies equality check predicate on the "used_for" field. It's identical to UsedForEQ.
func UsedFor(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedFor), v))
	})
}

// Sender applies equality check predicate on the "sender" field. It's identical to SenderEQ.
func Sender(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSender), v))
	})
}

// Account applies equality check predicate on the "account" field. It's identical to AccountEQ.
func Account(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccount), v))
	})
}

// AccountType applies equality check predicate on the "account_type" field. It's identical to AccountTypeEQ.
func AccountType(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UsedForEQ applies the EQ predicate on the "used_for" field.
func UsedForEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedFor), v))
	})
}

// UsedForNEQ applies the NEQ predicate on the "used_for" field.
func UsedForNEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsedFor), v))
	})
}

// UsedForIn applies the In predicate on the "used_for" field.
func UsedForIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsedFor), v...))
	})
}

// UsedForNotIn applies the NotIn predicate on the "used_for" field.
func UsedForNotIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsedFor), v...))
	})
}

// UsedForGT applies the GT predicate on the "used_for" field.
func UsedForGT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsedFor), v))
	})
}

// UsedForGTE applies the GTE predicate on the "used_for" field.
func UsedForGTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsedFor), v))
	})
}

// UsedForLT applies the LT predicate on the "used_for" field.
func UsedForLT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsedFor), v))
	})
}

// UsedForLTE applies the LTE predicate on the "used_for" field.
func UsedForLTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsedFor), v))
	})
}

// UsedForContains applies the Contains predicate on the "used_for" field.
func UsedForContains(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsedFor), v))
	})
}

// UsedForHasPrefix applies the HasPrefix predicate on the "used_for" field.
func UsedForHasPrefix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsedFor), v))
	})
}

// UsedForHasSuffix applies the HasSuffix predicate on the "used_for" field.
func UsedForHasSuffix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsedFor), v))
	})
}

// UsedForIsNil applies the IsNil predicate on the "used_for" field.
func UsedForIsNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsedFor)))
	})
}

// UsedForNotNil applies the NotNil predicate on the "used_for" field.
func UsedForNotNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsedFor)))
	})
}

// UsedForEqualFold applies the EqualFold predicate on the "used_for" field.
func UsedForEqualFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsedFor), v))
	})
}

// UsedForContainsFold applies the ContainsFold predicate on the "used_for" field.
func UsedForContainsFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsedFor), v))
	})
}

// SenderEQ applies the EQ predicate on the "sender" field.
func SenderEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSender), v))
	})
}

// SenderNEQ applies the NEQ predicate on the "sender" field.
func SenderNEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSender), v))
	})
}

// SenderIn applies the In predicate on the "sender" field.
func SenderIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSender), v...))
	})
}

// SenderNotIn applies the NotIn predicate on the "sender" field.
func SenderNotIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSender), v...))
	})
}

// SenderGT applies the GT predicate on the "sender" field.
func SenderGT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSender), v))
	})
}

// SenderGTE applies the GTE predicate on the "sender" field.
func SenderGTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSender), v))
	})
}

// SenderLT applies the LT predicate on the "sender" field.
func SenderLT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSender), v))
	})
}

// SenderLTE applies the LTE predicate on the "sender" field.
func SenderLTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSender), v))
	})
}

// SenderContains applies the Contains predicate on the "sender" field.
func SenderContains(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSender), v))
	})
}

// SenderHasPrefix applies the HasPrefix predicate on the "sender" field.
func SenderHasPrefix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSender), v))
	})
}

// SenderHasSuffix applies the HasSuffix predicate on the "sender" field.
func SenderHasSuffix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSender), v))
	})
}

// SenderIsNil applies the IsNil predicate on the "sender" field.
func SenderIsNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSender)))
	})
}

// SenderNotNil applies the NotNil predicate on the "sender" field.
func SenderNotNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSender)))
	})
}

// SenderEqualFold applies the EqualFold predicate on the "sender" field.
func SenderEqualFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSender), v))
	})
}

// SenderContainsFold applies the ContainsFold predicate on the "sender" field.
func SenderContainsFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSender), v))
	})
}

// AccountEQ applies the EQ predicate on the "account" field.
func AccountEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccount), v))
	})
}

// AccountNEQ applies the NEQ predicate on the "account" field.
func AccountNEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccount), v))
	})
}

// AccountIn applies the In predicate on the "account" field.
func AccountIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccount), v...))
	})
}

// AccountNotIn applies the NotIn predicate on the "account" field.
func AccountNotIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccount), v...))
	})
}

// AccountGT applies the GT predicate on the "account" field.
func AccountGT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccount), v))
	})
}

// AccountGTE applies the GTE predicate on the "account" field.
func AccountGTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccount), v))
	})
}

// AccountLT applies the LT predicate on the "account" field.
func AccountLT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccount), v))
	})
}

// AccountLTE applies the LTE predicate on the "account" field.
func AccountLTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccount), v))
	})
}

// AccountContains applies the Contains predicate on the "account" field.
func AccountContains(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccount), v))
	})
}

// AccountHasPrefix applies the HasPrefix predicate on the "account" field.
func AccountHasPrefix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccount), v))
	})
}

// AccountHasSuffix applies the HasSuffix predicate on the "account" field.
func AccountHasSuffix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccount), v))
	})
}

// AccountIsNil applies the IsNil predicate on the "account" field.
func AccountIsNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccount)))
	})
}

// AccountNotNil applies the NotNil predicate on the "account" field.
func AccountNotNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccount)))
	})
}

// AccountEqualFold applies the EqualFold predicate on the "account" field.
func AccountEqualFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccount), v))
	})
}

// AccountContainsFold applies the ContainsFold predicate on the "account" field.
func AccountContainsFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccount), v))
	})
}

// AccountTypeEQ applies the EQ predicate on the "account_type" field.
func AccountTypeEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountType), v))
	})
}

// AccountTypeNEQ applies the NEQ predicate on the "account_type" field.
func AccountTypeNEQ(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountType), v))
	})
}

// AccountTypeIn applies the In predicate on the "account_type" field.
func AccountTypeIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountType), v...))
	})
}

// AccountTypeNotIn applies the NotIn predicate on the "account_type" field.
func AccountTypeNotIn(vs ...string) predicate.Contact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountType), v...))
	})
}

// AccountTypeGT applies the GT predicate on the "account_type" field.
func AccountTypeGT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountType), v))
	})
}

// AccountTypeGTE applies the GTE predicate on the "account_type" field.
func AccountTypeGTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountType), v))
	})
}

// AccountTypeLT applies the LT predicate on the "account_type" field.
func AccountTypeLT(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountType), v))
	})
}

// AccountTypeLTE applies the LTE predicate on the "account_type" field.
func AccountTypeLTE(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountType), v))
	})
}

// AccountTypeContains applies the Contains predicate on the "account_type" field.
func AccountTypeContains(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountType), v))
	})
}

// AccountTypeHasPrefix applies the HasPrefix predicate on the "account_type" field.
func AccountTypeHasPrefix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountType), v))
	})
}

// AccountTypeHasSuffix applies the HasSuffix predicate on the "account_type" field.
func AccountTypeHasSuffix(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountType), v))
	})
}

// AccountTypeIsNil applies the IsNil predicate on the "account_type" field.
func AccountTypeIsNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountType)))
	})
}

// AccountTypeNotNil applies the NotNil predicate on the "account_type" field.
func AccountTypeNotNil() predicate.AppContact {
	return predicate.AppContact(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountType)))
	})
}

// AccountTypeEqualFold applies the EqualFold predicate on the "account_type" field.
func AccountTypeEqualFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountType), v))
	})
}

// AccountTypeContainsFold applies the ContainsFold predicate on the "account_type" field.
func AccountTypeContainsFold(v string) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contact) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contact) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contact) predicate.Contact {
	return predicate.Contact(func(s *sql.Selector) {
		p(s.Not())
	})
}
