// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/contact"
	"github.com/google/uuid"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContactCreate) SetCreatedAt(u uint32) *ContactCreate {
	cc.mutation.SetCreatedAt(u)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCreatedAt(u *uint32) *ContactCreate {
	if u != nil {
		cc.SetCreatedAt(*u)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContactCreate) SetUpdatedAt(u uint32) *ContactCreate {
	cc.mutation.SetUpdatedAt(u)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUpdatedAt(u *uint32) *ContactCreate {
	if u != nil {
		cc.SetUpdatedAt(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ContactCreate) SetDeletedAt(u uint32) *ContactCreate {
	cc.mutation.SetDeletedAt(u)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableDeletedAt(u *uint32) *ContactCreate {
	if u != nil {
		cc.SetDeletedAt(*u)
	}
	return cc
}

// SetAppID sets the "app_id" field.
func (cc *ContactCreate) SetAppID(u uuid.UUID) *ContactCreate {
	cc.mutation.SetAppID(u)
	return cc
}

// SetUsedFor sets the "used_for" field.
func (cc *ContactCreate) SetUsedFor(s string) *ContactCreate {
	cc.mutation.SetUsedFor(s)
	return cc
}

// SetSender sets the "sender" field.
func (cc *ContactCreate) SetSender(s string) *ContactCreate {
	cc.mutation.SetSender(s)
	return cc
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (cc *ContactCreate) SetNillableSender(s *string) *ContactCreate {
	if s != nil {
		cc.SetSender(*s)
	}
	return cc
}

// SetAccount sets the "account" field.
func (cc *ContactCreate) SetAccount(s string) *ContactCreate {
	cc.mutation.SetAccount(s)
	return cc
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (cc *ContactCreate) SetNillableAccount(s *string) *ContactCreate {
	if s != nil {
		cc.SetAccount(*s)
	}
	return cc
}

// SetAccountType sets the "account_type" field.
func (cc *ContactCreate) SetAccountType(s string) *ContactCreate {
	cc.mutation.SetAccountType(s)
	return cc
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (cc *ContactCreate) SetNillableAccountType(s *string) *ContactCreate {
	if s != nil {
		cc.SetAccountType(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContactCreate) SetID(u uuid.UUID) *ContactCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ContactCreate) SetNillableID(u *uuid.UUID) *ContactCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	var (
		err  error
		node *Contact
	)
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Contact)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ContactMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContactCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if contact.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized contact.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := contact.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if contact.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contact.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contact.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		if contact.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized contact.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := contact.DefaultDeletedAt()
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.Sender(); !ok {
		v := contact.DefaultSender
		cc.mutation.SetSender(v)
	}
	if _, ok := cc.mutation.Account(); !ok {
		v := contact.DefaultAccount
		cc.mutation.SetAccount(v)
	}
	if _, ok := cc.mutation.AccountType(); !ok {
		v := contact.DefaultAccountType
		cc.mutation.SetAccountType(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if contact.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized contact.DefaultID (forgotten import ent/runtime?)")
		}
		v := contact.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Contact.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Contact.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Contact.deleted_at"`)}
	}
	if _, ok := cc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Contact.app_id"`)}
	}
	if _, ok := cc.mutation.UsedFor(); !ok {
		return &ValidationError{Name: "used_for", err: errors.New(`ent: missing required field "Contact.used_for"`)}
	}
	if _, ok := cc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "Contact.sender"`)}
	}
	if _, ok := cc.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "Contact.account"`)}
	}
	if _, ok := cc.mutation.AccountType(); !ok {
		return &ValidationError{Name: "account_type", err: errors.New(`ent: missing required field "Contact.account_type"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contact.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: contact.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contact.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contact.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contact.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: contact.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := cc.mutation.UsedFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldUsedFor,
		})
		_node.UsedFor = value
	}
	if value, ok := cc.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := cc.mutation.Account(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldAccount,
		})
		_node.Account = value
	}
	if value, ok := cc.mutation.AccountType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldAccountType,
		})
		_node.AccountType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cc *ContactCreate) OnConflict(opts ...sql.ConflictOption) *ContactUpsertOne {
	cc.conflict = opts
	return &ContactUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *ContactCreate) OnConflictColumns(columns ...string) *ContactUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertOne{
		create: cc,
	}
}

type (
	// ContactUpsertOne is the builder for "upsert"-ing
	//  one Contact node.
	ContactUpsertOne struct {
		create *ContactCreate
	}

	// ContactUpsert is the "OnConflict" setter.
	ContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ContactUpsert) SetCreatedAt(v uint32) *ContactUpsert {
	u.Set(contact.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContactUpsert) UpdateCreatedAt() *ContactUpsert {
	u.SetExcluded(contact.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ContactUpsert) AddCreatedAt(v uint32) *ContactUpsert {
	u.Add(contact.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsert) SetUpdatedAt(v uint32) *ContactUpsert {
	u.Set(contact.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUpdatedAt() *ContactUpsert {
	u.SetExcluded(contact.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ContactUpsert) AddUpdatedAt(v uint32) *ContactUpsert {
	u.Add(contact.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContactUpsert) SetDeletedAt(v uint32) *ContactUpsert {
	u.Set(contact.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContactUpsert) UpdateDeletedAt() *ContactUpsert {
	u.SetExcluded(contact.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ContactUpsert) AddDeletedAt(v uint32) *ContactUpsert {
	u.Add(contact.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ContactUpsert) SetAppID(v uuid.UUID) *ContactUpsert {
	u.Set(contact.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ContactUpsert) UpdateAppID() *ContactUpsert {
	u.SetExcluded(contact.FieldAppID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *ContactUpsert) SetUsedFor(v string) *ContactUpsert {
	u.Set(contact.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUsedFor() *ContactUpsert {
	u.SetExcluded(contact.FieldUsedFor)
	return u
}

// SetSender sets the "sender" field.
func (u *ContactUpsert) SetSender(v string) *ContactUpsert {
	u.Set(contact.FieldSender, v)
	return u
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *ContactUpsert) UpdateSender() *ContactUpsert {
	u.SetExcluded(contact.FieldSender)
	return u
}

// SetAccount sets the "account" field.
func (u *ContactUpsert) SetAccount(v string) *ContactUpsert {
	u.Set(contact.FieldAccount, v)
	return u
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *ContactUpsert) UpdateAccount() *ContactUpsert {
	u.SetExcluded(contact.FieldAccount)
	return u
}

// SetAccountType sets the "account_type" field.
func (u *ContactUpsert) SetAccountType(v string) *ContactUpsert {
	u.Set(contact.FieldAccountType, v)
	return u
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *ContactUpsert) UpdateAccountType() *ContactUpsert {
	u.SetExcluded(contact.FieldAccountType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ContactUpsertOne) UpdateNewValues() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Contact.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ContactUpsertOne) Ignore() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertOne) DoNothing() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreate.OnConflict
// documentation for more info.
func (u *ContactUpsertOne) Update(set func(*ContactUpsert)) *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ContactUpsertOne) SetCreatedAt(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ContactUpsertOne) AddCreatedAt(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateCreatedAt() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsertOne) SetUpdatedAt(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ContactUpsertOne) AddUpdatedAt(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUpdatedAt() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContactUpsertOne) SetDeletedAt(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ContactUpsertOne) AddDeletedAt(v uint32) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateDeletedAt() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ContactUpsertOne) SetAppID(v uuid.UUID) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateAppID() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAppID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *ContactUpsertOne) SetUsedFor(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUsedFor() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSender sets the "sender" field.
func (u *ContactUpsertOne) SetSender(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateSender() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateSender()
	})
}

// SetAccount sets the "account" field.
func (u *ContactUpsertOne) SetAccount(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetAccount(v)
	})
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateAccount() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAccount()
	})
}

// SetAccountType sets the "account_type" field.
func (u *ContactUpsertOne) SetAccountType(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateAccountType() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAccountType()
	})
}

// Exec executes the query.
func (u *ContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContactUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ContactUpsertOne.ID is not supported by MySQL driver. Use ContactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContactUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	builders []*ContactCreate
	conflict []sql.ConflictOption
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *ContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContactUpsertBulk {
	ccb.conflict = opts
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *ContactCreateBulk) OnConflictColumns(columns ...string) *ContactUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// ContactUpsertBulk is the builder for "upsert"-ing
// a bulk of Contact nodes.
type ContactUpsertBulk struct {
	create *ContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contact.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ContactUpsertBulk) UpdateNewValues() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contact.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ContactUpsertBulk) Ignore() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertBulk) DoNothing() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreateBulk.OnConflict
// documentation for more info.
func (u *ContactUpsertBulk) Update(set func(*ContactUpsert)) *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ContactUpsertBulk) SetCreatedAt(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ContactUpsertBulk) AddCreatedAt(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateCreatedAt() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsertBulk) SetUpdatedAt(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ContactUpsertBulk) AddUpdatedAt(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUpdatedAt() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContactUpsertBulk) SetDeletedAt(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ContactUpsertBulk) AddDeletedAt(v uint32) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateDeletedAt() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ContactUpsertBulk) SetAppID(v uuid.UUID) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateAppID() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAppID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *ContactUpsertBulk) SetUsedFor(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUsedFor() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSender sets the "sender" field.
func (u *ContactUpsertBulk) SetSender(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateSender() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateSender()
	})
}

// SetAccount sets the "account" field.
func (u *ContactUpsertBulk) SetAccount(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetAccount(v)
	})
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateAccount() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAccount()
	})
}

// SetAccountType sets the "account_type" field.
func (u *ContactUpsertBulk) SetAccountType(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateAccountType() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateAccountType()
	})
}

// Exec executes the query.
func (u *ContactUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
