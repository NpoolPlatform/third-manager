// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/appemailtemplate"
	"github.com/google/uuid"
)

// AppEmailTemplate is the model entity for the AppEmailTemplate schema.
type AppEmailTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// DefaultToUsername holds the value of the "default_to_username" field.
	DefaultToUsername string `json:"default_to_username,omitempty"`
	// UsedFor holds the value of the "used_for" field.
	UsedFor string `json:"used_for,omitempty"`
	// Sender holds the value of the "sender" field.
	Sender string `json:"sender,omitempty"`
	// ReplyTos holds the value of the "reply_tos" field.
	ReplyTos []string `json:"reply_tos,omitempty"`
	// CcTos holds the value of the "cc_tos" field.
	CcTos []string `json:"cc_tos,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppEmailTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appemailtemplate.FieldReplyTos, appemailtemplate.FieldCcTos:
			values[i] = new([]byte)
		case appemailtemplate.FieldCreateAt, appemailtemplate.FieldUpdateAt:
			values[i] = new(sql.NullInt64)
		case appemailtemplate.FieldDefaultToUsername, appemailtemplate.FieldUsedFor, appemailtemplate.FieldSender, appemailtemplate.FieldSubject, appemailtemplate.FieldBody:
			values[i] = new(sql.NullString)
		case appemailtemplate.FieldID, appemailtemplate.FieldAppID, appemailtemplate.FieldLangID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppEmailTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppEmailTemplate fields.
func (aet *AppEmailTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appemailtemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aet.ID = *value
			}
		case appemailtemplate.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				aet.AppID = *value
			}
		case appemailtemplate.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				aet.LangID = *value
			}
		case appemailtemplate.FieldDefaultToUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_to_username", values[i])
			} else if value.Valid {
				aet.DefaultToUsername = value.String
			}
		case appemailtemplate.FieldUsedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field used_for", values[i])
			} else if value.Valid {
				aet.UsedFor = value.String
			}
		case appemailtemplate.FieldSender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender", values[i])
			} else if value.Valid {
				aet.Sender = value.String
			}
		case appemailtemplate.FieldReplyTos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reply_tos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aet.ReplyTos); err != nil {
					return fmt.Errorf("unmarshal field reply_tos: %w", err)
				}
			}
		case appemailtemplate.FieldCcTos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cc_tos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aet.CcTos); err != nil {
					return fmt.Errorf("unmarshal field cc_tos: %w", err)
				}
			}
		case appemailtemplate.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				aet.Subject = value.String
			}
		case appemailtemplate.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				aet.Body = value.String
			}
		case appemailtemplate.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				aet.CreateAt = uint32(value.Int64)
			}
		case appemailtemplate.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				aet.UpdateAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppEmailTemplate.
// Note that you need to call AppEmailTemplate.Unwrap() before calling this method if this AppEmailTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (aet *AppEmailTemplate) Update() *AppEmailTemplateUpdateOne {
	return (&AppEmailTemplateClient{config: aet.config}).UpdateOne(aet)
}

// Unwrap unwraps the AppEmailTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aet *AppEmailTemplate) Unwrap() *AppEmailTemplate {
	_tx, ok := aet.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppEmailTemplate is not a transactional entity")
	}
	aet.config.driver = _tx.drv
	return aet
}

// String implements the fmt.Stringer.
func (aet *AppEmailTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("AppEmailTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aet.ID))
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", aet.AppID))
	builder.WriteString(", ")
	builder.WriteString("lang_id=")
	builder.WriteString(fmt.Sprintf("%v", aet.LangID))
	builder.WriteString(", ")
	builder.WriteString("default_to_username=")
	builder.WriteString(aet.DefaultToUsername)
	builder.WriteString(", ")
	builder.WriteString("used_for=")
	builder.WriteString(aet.UsedFor)
	builder.WriteString(", ")
	builder.WriteString("sender=")
	builder.WriteString(aet.Sender)
	builder.WriteString(", ")
	builder.WriteString("reply_tos=")
	builder.WriteString(fmt.Sprintf("%v", aet.ReplyTos))
	builder.WriteString(", ")
	builder.WriteString("cc_tos=")
	builder.WriteString(fmt.Sprintf("%v", aet.CcTos))
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(aet.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(aet.Body)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", aet.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", aet.UpdateAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppEmailTemplates is a parsable slice of AppEmailTemplate.
type AppEmailTemplates []*AppEmailTemplate

func (aet AppEmailTemplates) config(cfg config) {
	for _i := range aet {
		aet[_i].config = cfg
	}
}
