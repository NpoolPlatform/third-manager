// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/smstemplate"
	"github.com/google/uuid"
)

// SMSTemplateCreate is the builder for creating a SMSTemplate entity.
type SMSTemplateCreate struct {
	config
	mutation *SMSTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (stc *SMSTemplateCreate) SetCreatedAt(u uint32) *SMSTemplateCreate {
	stc.mutation.SetCreatedAt(u)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableCreatedAt(u *uint32) *SMSTemplateCreate {
	if u != nil {
		stc.SetCreatedAt(*u)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *SMSTemplateCreate) SetUpdatedAt(u uint32) *SMSTemplateCreate {
	stc.mutation.SetUpdatedAt(u)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableUpdatedAt(u *uint32) *SMSTemplateCreate {
	if u != nil {
		stc.SetUpdatedAt(*u)
	}
	return stc
}

// SetDeletedAt sets the "deleted_at" field.
func (stc *SMSTemplateCreate) SetDeletedAt(u uint32) *SMSTemplateCreate {
	stc.mutation.SetDeletedAt(u)
	return stc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableDeletedAt(u *uint32) *SMSTemplateCreate {
	if u != nil {
		stc.SetDeletedAt(*u)
	}
	return stc
}

// SetAppID sets the "app_id" field.
func (stc *SMSTemplateCreate) SetAppID(u uuid.UUID) *SMSTemplateCreate {
	stc.mutation.SetAppID(u)
	return stc
}

// SetLangID sets the "lang_id" field.
func (stc *SMSTemplateCreate) SetLangID(u uuid.UUID) *SMSTemplateCreate {
	stc.mutation.SetLangID(u)
	return stc
}

// SetUsedFor sets the "used_for" field.
func (stc *SMSTemplateCreate) SetUsedFor(s string) *SMSTemplateCreate {
	stc.mutation.SetUsedFor(s)
	return stc
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableUsedFor(s *string) *SMSTemplateCreate {
	if s != nil {
		stc.SetUsedFor(*s)
	}
	return stc
}

// SetSubject sets the "subject" field.
func (stc *SMSTemplateCreate) SetSubject(s string) *SMSTemplateCreate {
	stc.mutation.SetSubject(s)
	return stc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableSubject(s *string) *SMSTemplateCreate {
	if s != nil {
		stc.SetSubject(*s)
	}
	return stc
}

// SetMessage sets the "message" field.
func (stc *SMSTemplateCreate) SetMessage(s string) *SMSTemplateCreate {
	stc.mutation.SetMessage(s)
	return stc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableMessage(s *string) *SMSTemplateCreate {
	if s != nil {
		stc.SetMessage(*s)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SMSTemplateCreate) SetID(u uuid.UUID) *SMSTemplateCreate {
	stc.mutation.SetID(u)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *SMSTemplateCreate) SetNillableID(u *uuid.UUID) *SMSTemplateCreate {
	if u != nil {
		stc.SetID(*u)
	}
	return stc
}

// Mutation returns the SMSTemplateMutation object of the builder.
func (stc *SMSTemplateCreate) Mutation() *SMSTemplateMutation {
	return stc.mutation
}

// Save creates the SMSTemplate in the database.
func (stc *SMSTemplateCreate) Save(ctx context.Context) (*SMSTemplate, error) {
	var (
		err  error
		node *SMSTemplate
	)
	if err := stc.defaults(); err != nil {
		return nil, err
	}
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SMSTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			if node, err = stc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			if stc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SMSTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SMSTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SMSTemplateCreate) SaveX(ctx context.Context) *SMSTemplate {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SMSTemplateCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SMSTemplateCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SMSTemplateCreate) defaults() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		if smstemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized smstemplate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := smstemplate.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		if smstemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized smstemplate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := smstemplate.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stc.mutation.DeletedAt(); !ok {
		if smstemplate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized smstemplate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := smstemplate.DefaultDeletedAt()
		stc.mutation.SetDeletedAt(v)
	}
	if _, ok := stc.mutation.UsedFor(); !ok {
		v := smstemplate.DefaultUsedFor
		stc.mutation.SetUsedFor(v)
	}
	if _, ok := stc.mutation.Subject(); !ok {
		v := smstemplate.DefaultSubject
		stc.mutation.SetSubject(v)
	}
	if _, ok := stc.mutation.Message(); !ok {
		v := smstemplate.DefaultMessage
		stc.mutation.SetMessage(v)
	}
	if _, ok := stc.mutation.ID(); !ok {
		if smstemplate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized smstemplate.DefaultID (forgotten import ent/runtime?)")
		}
		v := smstemplate.DefaultID()
		stc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (stc *SMSTemplateCreate) check() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SMSTemplate.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SMSTemplate.updated_at"`)}
	}
	if _, ok := stc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SMSTemplate.deleted_at"`)}
	}
	if _, ok := stc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "SMSTemplate.app_id"`)}
	}
	if _, ok := stc.mutation.LangID(); !ok {
		return &ValidationError{Name: "lang_id", err: errors.New(`ent: missing required field "SMSTemplate.lang_id"`)}
	}
	if _, ok := stc.mutation.UsedFor(); !ok {
		return &ValidationError{Name: "used_for", err: errors.New(`ent: missing required field "SMSTemplate.used_for"`)}
	}
	if _, ok := stc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "SMSTemplate.subject"`)}
	}
	if _, ok := stc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "SMSTemplate.message"`)}
	}
	return nil
}

func (stc *SMSTemplateCreate) sqlSave(ctx context.Context) (*SMSTemplate, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (stc *SMSTemplateCreate) createSpec() (*SMSTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &SMSTemplate{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: smstemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: smstemplate.FieldID,
			},
		}
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: smstemplate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: smstemplate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := stc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: smstemplate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := stc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: smstemplate.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := stc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: smstemplate.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := stc.mutation.UsedFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smstemplate.FieldUsedFor,
		})
		_node.UsedFor = value
	}
	if value, ok := stc.mutation.Subject(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smstemplate.FieldSubject,
		})
		_node.Subject = value
	}
	if value, ok := stc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: smstemplate.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SMSTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SMSTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (stc *SMSTemplateCreate) OnConflict(opts ...sql.ConflictOption) *SMSTemplateUpsertOne {
	stc.conflict = opts
	return &SMSTemplateUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (stc *SMSTemplateCreate) OnConflictColumns(columns ...string) *SMSTemplateUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SMSTemplateUpsertOne{
		create: stc,
	}
}

type (
	// SMSTemplateUpsertOne is the builder for "upsert"-ing
	//  one SMSTemplate node.
	SMSTemplateUpsertOne struct {
		create *SMSTemplateCreate
	}

	// SMSTemplateUpsert is the "OnConflict" setter.
	SMSTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SMSTemplateUpsert) SetCreatedAt(v uint32) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateCreatedAt() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SMSTemplateUpsert) AddCreatedAt(v uint32) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SMSTemplateUpsert) SetUpdatedAt(v uint32) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateUpdatedAt() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SMSTemplateUpsert) AddUpdatedAt(v uint32) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SMSTemplateUpsert) SetDeletedAt(v uint32) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateDeletedAt() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SMSTemplateUpsert) AddDeletedAt(v uint32) *SMSTemplateUpsert {
	u.Add(smstemplate.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *SMSTemplateUpsert) SetAppID(v uuid.UUID) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateAppID() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *SMSTemplateUpsert) SetLangID(v uuid.UUID) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateLangID() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldLangID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *SMSTemplateUpsert) SetUsedFor(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateUsedFor() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldUsedFor)
	return u
}

// SetSubject sets the "subject" field.
func (u *SMSTemplateUpsert) SetSubject(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateSubject() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldSubject)
	return u
}

// SetMessage sets the "message" field.
func (u *SMSTemplateUpsert) SetMessage(v string) *SMSTemplateUpsert {
	u.Set(smstemplate.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SMSTemplateUpsert) UpdateMessage() *SMSTemplateUpsert {
	u.SetExcluded(smstemplate.FieldMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(smstemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SMSTemplateUpsertOne) UpdateNewValues() *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(smstemplate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SMSTemplate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SMSTemplateUpsertOne) Ignore() *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SMSTemplateUpsertOne) DoNothing() *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SMSTemplateCreate.OnConflict
// documentation for more info.
func (u *SMSTemplateUpsertOne) Update(set func(*SMSTemplateUpsert)) *SMSTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SMSTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SMSTemplateUpsertOne) SetCreatedAt(v uint32) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SMSTemplateUpsertOne) AddCreatedAt(v uint32) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateCreatedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SMSTemplateUpsertOne) SetUpdatedAt(v uint32) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SMSTemplateUpsertOne) AddUpdatedAt(v uint32) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateUpdatedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SMSTemplateUpsertOne) SetDeletedAt(v uint32) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SMSTemplateUpsertOne) AddDeletedAt(v uint32) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateDeletedAt() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *SMSTemplateUpsertOne) SetAppID(v uuid.UUID) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateAppID() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *SMSTemplateUpsertOne) SetLangID(v uuid.UUID) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateLangID() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *SMSTemplateUpsertOne) SetUsedFor(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateUsedFor() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSubject sets the "subject" field.
func (u *SMSTemplateUpsertOne) SetSubject(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateSubject() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetMessage sets the "message" field.
func (u *SMSTemplateUpsertOne) SetMessage(v string) *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SMSTemplateUpsertOne) UpdateMessage() *SMSTemplateUpsertOne {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMessage()
	})
}

// Exec executes the query.
func (u *SMSTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SMSTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SMSTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SMSTemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SMSTemplateUpsertOne.ID is not supported by MySQL driver. Use SMSTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SMSTemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SMSTemplateCreateBulk is the builder for creating many SMSTemplate entities in bulk.
type SMSTemplateCreateBulk struct {
	config
	builders []*SMSTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the SMSTemplate entities in the database.
func (stcb *SMSTemplateCreateBulk) Save(ctx context.Context) ([]*SMSTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SMSTemplate, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SMSTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SMSTemplateCreateBulk) SaveX(ctx context.Context) []*SMSTemplate {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SMSTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SMSTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SMSTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SMSTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (stcb *SMSTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SMSTemplateUpsertBulk {
	stcb.conflict = opts
	return &SMSTemplateUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (stcb *SMSTemplateCreateBulk) OnConflictColumns(columns ...string) *SMSTemplateUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SMSTemplateUpsertBulk{
		create: stcb,
	}
}

// SMSTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of SMSTemplate nodes.
type SMSTemplateUpsertBulk struct {
	create *SMSTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(smstemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SMSTemplateUpsertBulk) UpdateNewValues() *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(smstemplate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SMSTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SMSTemplateUpsertBulk) Ignore() *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SMSTemplateUpsertBulk) DoNothing() *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SMSTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *SMSTemplateUpsertBulk) Update(set func(*SMSTemplateUpsert)) *SMSTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SMSTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SMSTemplateUpsertBulk) SetCreatedAt(v uint32) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SMSTemplateUpsertBulk) AddCreatedAt(v uint32) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateCreatedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SMSTemplateUpsertBulk) SetUpdatedAt(v uint32) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SMSTemplateUpsertBulk) AddUpdatedAt(v uint32) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateUpdatedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SMSTemplateUpsertBulk) SetDeletedAt(v uint32) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SMSTemplateUpsertBulk) AddDeletedAt(v uint32) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateDeletedAt() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *SMSTemplateUpsertBulk) SetAppID(v uuid.UUID) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateAppID() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *SMSTemplateUpsertBulk) SetLangID(v uuid.UUID) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateLangID() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *SMSTemplateUpsertBulk) SetUsedFor(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateUsedFor() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSubject sets the "subject" field.
func (u *SMSTemplateUpsertBulk) SetSubject(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateSubject() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetMessage sets the "message" field.
func (u *SMSTemplateUpsertBulk) SetMessage(v string) *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SMSTemplateUpsertBulk) UpdateMessage() *SMSTemplateUpsertBulk {
	return u.Update(func(s *SMSTemplateUpsert) {
		s.UpdateMessage()
	})
}

// Exec executes the query.
func (u *SMSTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SMSTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SMSTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SMSTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
