// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/appsmstemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppSMSTemplateUpdate is the builder for updating AppSMSTemplate entities.
type AppSMSTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSMSTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSMSTemplateUpdate builder.
func (astu *AppSMSTemplateUpdate) Where(ps ...predicate.AppSMSTemplate) *AppSMSTemplateUpdate {
	astu.mutation.Where(ps...)
	return astu
}

// SetCreatedAt sets the "created_at" field.
func (astu *AppSMSTemplateUpdate) SetCreatedAt(u uint32) *AppSMSTemplateUpdate {
	astu.mutation.ResetCreatedAt()
	astu.mutation.SetCreatedAt(u)
	return astu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (astu *AppSMSTemplateUpdate) SetNillableCreatedAt(u *uint32) *AppSMSTemplateUpdate {
	if u != nil {
		astu.SetCreatedAt(*u)
	}
	return astu
}

// AddCreatedAt adds u to the "created_at" field.
func (astu *AppSMSTemplateUpdate) AddCreatedAt(u int32) *AppSMSTemplateUpdate {
	astu.mutation.AddCreatedAt(u)
	return astu
}

// SetUpdatedAt sets the "updated_at" field.
func (astu *AppSMSTemplateUpdate) SetUpdatedAt(u uint32) *AppSMSTemplateUpdate {
	astu.mutation.ResetUpdatedAt()
	astu.mutation.SetUpdatedAt(u)
	return astu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (astu *AppSMSTemplateUpdate) AddUpdatedAt(u int32) *AppSMSTemplateUpdate {
	astu.mutation.AddUpdatedAt(u)
	return astu
}

// SetDeletedAt sets the "deleted_at" field.
func (astu *AppSMSTemplateUpdate) SetDeletedAt(u uint32) *AppSMSTemplateUpdate {
	astu.mutation.ResetDeletedAt()
	astu.mutation.SetDeletedAt(u)
	return astu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (astu *AppSMSTemplateUpdate) SetNillableDeletedAt(u *uint32) *AppSMSTemplateUpdate {
	if u != nil {
		astu.SetDeletedAt(*u)
	}
	return astu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (astu *AppSMSTemplateUpdate) AddDeletedAt(u int32) *AppSMSTemplateUpdate {
	astu.mutation.AddDeletedAt(u)
	return astu
}

// SetAppID sets the "app_id" field.
func (astu *AppSMSTemplateUpdate) SetAppID(u uuid.UUID) *AppSMSTemplateUpdate {
	astu.mutation.SetAppID(u)
	return astu
}

// SetLangID sets the "lang_id" field.
func (astu *AppSMSTemplateUpdate) SetLangID(u uuid.UUID) *AppSMSTemplateUpdate {
	astu.mutation.SetLangID(u)
	return astu
}

// SetUsedFor sets the "used_for" field.
func (astu *AppSMSTemplateUpdate) SetUsedFor(s string) *AppSMSTemplateUpdate {
	astu.mutation.SetUsedFor(s)
	return astu
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (astu *AppSMSTemplateUpdate) SetNillableUsedFor(s *string) *AppSMSTemplateUpdate {
	if s != nil {
		astu.SetUsedFor(*s)
	}
	return astu
}

// SetSubject sets the "subject" field.
func (astu *AppSMSTemplateUpdate) SetSubject(s string) *AppSMSTemplateUpdate {
	astu.mutation.SetSubject(s)
	return astu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (astu *AppSMSTemplateUpdate) SetNillableSubject(s *string) *AppSMSTemplateUpdate {
	if s != nil {
		astu.SetSubject(*s)
	}
	return astu
}

// SetMessage sets the "message" field.
func (astu *AppSMSTemplateUpdate) SetMessage(s string) *AppSMSTemplateUpdate {
	astu.mutation.SetMessage(s)
	return astu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (astu *AppSMSTemplateUpdate) SetNillableMessage(s *string) *AppSMSTemplateUpdate {
	if s != nil {
		astu.SetMessage(*s)
	}
	return astu
}

// Mutation returns the AppSMSTemplateMutation object of the builder.
func (astu *AppSMSTemplateUpdate) Mutation() *AppSMSTemplateMutation {
	return astu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (astu *AppSMSTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := astu.defaults(); err != nil {
		return 0, err
	}
	if len(astu.hooks) == 0 {
		affected, err = astu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppSMSTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			astu.mutation = mutation
			affected, err = astu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(astu.hooks) - 1; i >= 0; i-- {
			if astu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = astu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, astu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (astu *AppSMSTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := astu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (astu *AppSMSTemplateUpdate) Exec(ctx context.Context) error {
	_, err := astu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (astu *AppSMSTemplateUpdate) ExecX(ctx context.Context) {
	if err := astu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (astu *AppSMSTemplateUpdate) defaults() error {
	if _, ok := astu.mutation.UpdatedAt(); !ok {
		if appsmstemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appsmstemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appsmstemplate.UpdateDefaultUpdatedAt()
		astu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (astu *AppSMSTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSMSTemplateUpdate {
	astu.modifiers = append(astu.modifiers, modifiers...)
	return astu
}

func (astu *AppSMSTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appsmstemplate.Table,
			Columns: appsmstemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appsmstemplate.FieldID,
			},
		},
	}
	if ps := astu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := astu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldCreatedAt,
		})
	}
	if value, ok := astu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldCreatedAt,
		})
	}
	if value, ok := astu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldUpdatedAt,
		})
	}
	if value, ok := astu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldUpdatedAt,
		})
	}
	if value, ok := astu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldDeletedAt,
		})
	}
	if value, ok := astu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldDeletedAt,
		})
	}
	if value, ok := astu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsmstemplate.FieldAppID,
		})
	}
	if value, ok := astu.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsmstemplate.FieldLangID,
		})
	}
	if value, ok := astu.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appsmstemplate.FieldUsedFor,
		})
	}
	if value, ok := astu.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appsmstemplate.FieldSubject,
		})
	}
	if value, ok := astu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appsmstemplate.FieldMessage,
		})
	}
	_spec.Modifiers = astu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, astu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsmstemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppSMSTemplateUpdateOne is the builder for updating a single AppSMSTemplate entity.
type AppSMSTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSMSTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (astuo *AppSMSTemplateUpdateOne) SetCreatedAt(u uint32) *AppSMSTemplateUpdateOne {
	astuo.mutation.ResetCreatedAt()
	astuo.mutation.SetCreatedAt(u)
	return astuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (astuo *AppSMSTemplateUpdateOne) SetNillableCreatedAt(u *uint32) *AppSMSTemplateUpdateOne {
	if u != nil {
		astuo.SetCreatedAt(*u)
	}
	return astuo
}

// AddCreatedAt adds u to the "created_at" field.
func (astuo *AppSMSTemplateUpdateOne) AddCreatedAt(u int32) *AppSMSTemplateUpdateOne {
	astuo.mutation.AddCreatedAt(u)
	return astuo
}

// SetUpdatedAt sets the "updated_at" field.
func (astuo *AppSMSTemplateUpdateOne) SetUpdatedAt(u uint32) *AppSMSTemplateUpdateOne {
	astuo.mutation.ResetUpdatedAt()
	astuo.mutation.SetUpdatedAt(u)
	return astuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (astuo *AppSMSTemplateUpdateOne) AddUpdatedAt(u int32) *AppSMSTemplateUpdateOne {
	astuo.mutation.AddUpdatedAt(u)
	return astuo
}

// SetDeletedAt sets the "deleted_at" field.
func (astuo *AppSMSTemplateUpdateOne) SetDeletedAt(u uint32) *AppSMSTemplateUpdateOne {
	astuo.mutation.ResetDeletedAt()
	astuo.mutation.SetDeletedAt(u)
	return astuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (astuo *AppSMSTemplateUpdateOne) SetNillableDeletedAt(u *uint32) *AppSMSTemplateUpdateOne {
	if u != nil {
		astuo.SetDeletedAt(*u)
	}
	return astuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (astuo *AppSMSTemplateUpdateOne) AddDeletedAt(u int32) *AppSMSTemplateUpdateOne {
	astuo.mutation.AddDeletedAt(u)
	return astuo
}

// SetAppID sets the "app_id" field.
func (astuo *AppSMSTemplateUpdateOne) SetAppID(u uuid.UUID) *AppSMSTemplateUpdateOne {
	astuo.mutation.SetAppID(u)
	return astuo
}

// SetLangID sets the "lang_id" field.
func (astuo *AppSMSTemplateUpdateOne) SetLangID(u uuid.UUID) *AppSMSTemplateUpdateOne {
	astuo.mutation.SetLangID(u)
	return astuo
}

// SetUsedFor sets the "used_for" field.
func (astuo *AppSMSTemplateUpdateOne) SetUsedFor(s string) *AppSMSTemplateUpdateOne {
	astuo.mutation.SetUsedFor(s)
	return astuo
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (astuo *AppSMSTemplateUpdateOne) SetNillableUsedFor(s *string) *AppSMSTemplateUpdateOne {
	if s != nil {
		astuo.SetUsedFor(*s)
	}
	return astuo
}

// SetSubject sets the "subject" field.
func (astuo *AppSMSTemplateUpdateOne) SetSubject(s string) *AppSMSTemplateUpdateOne {
	astuo.mutation.SetSubject(s)
	return astuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (astuo *AppSMSTemplateUpdateOne) SetNillableSubject(s *string) *AppSMSTemplateUpdateOne {
	if s != nil {
		astuo.SetSubject(*s)
	}
	return astuo
}

// SetMessage sets the "message" field.
func (astuo *AppSMSTemplateUpdateOne) SetMessage(s string) *AppSMSTemplateUpdateOne {
	astuo.mutation.SetMessage(s)
	return astuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (astuo *AppSMSTemplateUpdateOne) SetNillableMessage(s *string) *AppSMSTemplateUpdateOne {
	if s != nil {
		astuo.SetMessage(*s)
	}
	return astuo
}

// Mutation returns the AppSMSTemplateMutation object of the builder.
func (astuo *AppSMSTemplateUpdateOne) Mutation() *AppSMSTemplateMutation {
	return astuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (astuo *AppSMSTemplateUpdateOne) Select(field string, fields ...string) *AppSMSTemplateUpdateOne {
	astuo.fields = append([]string{field}, fields...)
	return astuo
}

// Save executes the query and returns the updated AppSMSTemplate entity.
func (astuo *AppSMSTemplateUpdateOne) Save(ctx context.Context) (*AppSMSTemplate, error) {
	var (
		err  error
		node *AppSMSTemplate
	)
	if err := astuo.defaults(); err != nil {
		return nil, err
	}
	if len(astuo.hooks) == 0 {
		node, err = astuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppSMSTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			astuo.mutation = mutation
			node, err = astuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(astuo.hooks) - 1; i >= 0; i-- {
			if astuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = astuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, astuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppSMSTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppSMSTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (astuo *AppSMSTemplateUpdateOne) SaveX(ctx context.Context) *AppSMSTemplate {
	node, err := astuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (astuo *AppSMSTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := astuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (astuo *AppSMSTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := astuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (astuo *AppSMSTemplateUpdateOne) defaults() error {
	if _, ok := astuo.mutation.UpdatedAt(); !ok {
		if appsmstemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appsmstemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appsmstemplate.UpdateDefaultUpdatedAt()
		astuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (astuo *AppSMSTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSMSTemplateUpdateOne {
	astuo.modifiers = append(astuo.modifiers, modifiers...)
	return astuo
}

func (astuo *AppSMSTemplateUpdateOne) sqlSave(ctx context.Context) (_node *AppSMSTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appsmstemplate.Table,
			Columns: appsmstemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appsmstemplate.FieldID,
			},
		},
	}
	id, ok := astuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppSMSTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := astuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsmstemplate.FieldID)
		for _, f := range fields {
			if !appsmstemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appsmstemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := astuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := astuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldCreatedAt,
		})
	}
	if value, ok := astuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldCreatedAt,
		})
	}
	if value, ok := astuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldUpdatedAt,
		})
	}
	if value, ok := astuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldUpdatedAt,
		})
	}
	if value, ok := astuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldDeletedAt,
		})
	}
	if value, ok := astuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appsmstemplate.FieldDeletedAt,
		})
	}
	if value, ok := astuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsmstemplate.FieldAppID,
		})
	}
	if value, ok := astuo.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appsmstemplate.FieldLangID,
		})
	}
	if value, ok := astuo.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appsmstemplate.FieldUsedFor,
		})
	}
	if value, ok := astuo.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appsmstemplate.FieldSubject,
		})
	}
	if value, ok := astuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appsmstemplate.FieldMessage,
		})
	}
	_spec.Modifiers = astuo.modifiers
	_node = &AppSMSTemplate{config: astuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, astuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsmstemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
