// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/emailtemplate"
	"github.com/google/uuid"
)

// EmailTemplateCreate is the builder for creating a EmailTemplate entity.
type EmailTemplateCreate struct {
	config
	mutation *EmailTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (etc *EmailTemplateCreate) SetCreatedAt(u uint32) *EmailTemplateCreate {
	etc.mutation.SetCreatedAt(u)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableCreatedAt(u *uint32) *EmailTemplateCreate {
	if u != nil {
		etc.SetCreatedAt(*u)
	}
	return etc
}

// SetUpdatedAt sets the "updated_at" field.
func (etc *EmailTemplateCreate) SetUpdatedAt(u uint32) *EmailTemplateCreate {
	etc.mutation.SetUpdatedAt(u)
	return etc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableUpdatedAt(u *uint32) *EmailTemplateCreate {
	if u != nil {
		etc.SetUpdatedAt(*u)
	}
	return etc
}

// SetDeletedAt sets the "deleted_at" field.
func (etc *EmailTemplateCreate) SetDeletedAt(u uint32) *EmailTemplateCreate {
	etc.mutation.SetDeletedAt(u)
	return etc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableDeletedAt(u *uint32) *EmailTemplateCreate {
	if u != nil {
		etc.SetDeletedAt(*u)
	}
	return etc
}

// SetAppID sets the "app_id" field.
func (etc *EmailTemplateCreate) SetAppID(u uuid.UUID) *EmailTemplateCreate {
	etc.mutation.SetAppID(u)
	return etc
}

// SetLangID sets the "lang_id" field.
func (etc *EmailTemplateCreate) SetLangID(u uuid.UUID) *EmailTemplateCreate {
	etc.mutation.SetLangID(u)
	return etc
}

// SetDefaultToUsername sets the "default_to_username" field.
func (etc *EmailTemplateCreate) SetDefaultToUsername(s string) *EmailTemplateCreate {
	etc.mutation.SetDefaultToUsername(s)
	return etc
}

// SetUsedFor sets the "used_for" field.
func (etc *EmailTemplateCreate) SetUsedFor(s string) *EmailTemplateCreate {
	etc.mutation.SetUsedFor(s)
	return etc
}

// SetSender sets the "sender" field.
func (etc *EmailTemplateCreate) SetSender(s string) *EmailTemplateCreate {
	etc.mutation.SetSender(s)
	return etc
}

// SetReplyTos sets the "reply_tos" field.
func (etc *EmailTemplateCreate) SetReplyTos(s []string) *EmailTemplateCreate {
	etc.mutation.SetReplyTos(s)
	return etc
}

// SetCcTos sets the "cc_tos" field.
func (etc *EmailTemplateCreate) SetCcTos(s []string) *EmailTemplateCreate {
	etc.mutation.SetCcTos(s)
	return etc
}

// SetSubject sets the "subject" field.
func (etc *EmailTemplateCreate) SetSubject(s string) *EmailTemplateCreate {
	etc.mutation.SetSubject(s)
	return etc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableSubject(s *string) *EmailTemplateCreate {
	if s != nil {
		etc.SetSubject(*s)
	}
	return etc
}

// SetBody sets the "body" field.
func (etc *EmailTemplateCreate) SetBody(s string) *EmailTemplateCreate {
	etc.mutation.SetBody(s)
	return etc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableBody(s *string) *EmailTemplateCreate {
	if s != nil {
		etc.SetBody(*s)
	}
	return etc
}

// SetID sets the "id" field.
func (etc *EmailTemplateCreate) SetID(u uuid.UUID) *EmailTemplateCreate {
	etc.mutation.SetID(u)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableID(u *uuid.UUID) *EmailTemplateCreate {
	if u != nil {
		etc.SetID(*u)
	}
	return etc
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etc *EmailTemplateCreate) Mutation() *EmailTemplateMutation {
	return etc.mutation
}

// Save creates the EmailTemplate in the database.
func (etc *EmailTemplateCreate) Save(ctx context.Context) (*EmailTemplate, error) {
	var (
		err  error
		node *EmailTemplate
	)
	if err := etc.defaults(); err != nil {
		return nil, err
	}
	if len(etc.hooks) == 0 {
		if err = etc.check(); err != nil {
			return nil, err
		}
		node, err = etc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etc.check(); err != nil {
				return nil, err
			}
			etc.mutation = mutation
			if node, err = etc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(etc.hooks) - 1; i >= 0; i-- {
			if etc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, etc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EmailTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmailTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EmailTemplateCreate) SaveX(ctx context.Context) *EmailTemplate {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EmailTemplateCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EmailTemplateCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EmailTemplateCreate) defaults() error {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		if emailtemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		if emailtemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultUpdatedAt()
		etc.mutation.SetUpdatedAt(v)
	}
	if _, ok := etc.mutation.DeletedAt(); !ok {
		if emailtemplate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultDeletedAt()
		etc.mutation.SetDeletedAt(v)
	}
	if _, ok := etc.mutation.ReplyTos(); !ok {
		v := emailtemplate.DefaultReplyTos
		etc.mutation.SetReplyTos(v)
	}
	if _, ok := etc.mutation.CcTos(); !ok {
		v := emailtemplate.DefaultCcTos
		etc.mutation.SetCcTos(v)
	}
	if _, ok := etc.mutation.Subject(); !ok {
		v := emailtemplate.DefaultSubject
		etc.mutation.SetSubject(v)
	}
	if _, ok := etc.mutation.Body(); !ok {
		v := emailtemplate.DefaultBody
		etc.mutation.SetBody(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		if emailtemplate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultID (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultID()
		etc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (etc *EmailTemplateCreate) check() error {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailTemplate.created_at"`)}
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailTemplate.updated_at"`)}
	}
	if _, ok := etc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "EmailTemplate.deleted_at"`)}
	}
	if _, ok := etc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "EmailTemplate.app_id"`)}
	}
	if _, ok := etc.mutation.LangID(); !ok {
		return &ValidationError{Name: "lang_id", err: errors.New(`ent: missing required field "EmailTemplate.lang_id"`)}
	}
	if _, ok := etc.mutation.DefaultToUsername(); !ok {
		return &ValidationError{Name: "default_to_username", err: errors.New(`ent: missing required field "EmailTemplate.default_to_username"`)}
	}
	if _, ok := etc.mutation.UsedFor(); !ok {
		return &ValidationError{Name: "used_for", err: errors.New(`ent: missing required field "EmailTemplate.used_for"`)}
	}
	if _, ok := etc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "EmailTemplate.sender"`)}
	}
	if _, ok := etc.mutation.ReplyTos(); !ok {
		return &ValidationError{Name: "reply_tos", err: errors.New(`ent: missing required field "EmailTemplate.reply_tos"`)}
	}
	if _, ok := etc.mutation.CcTos(); !ok {
		return &ValidationError{Name: "cc_tos", err: errors.New(`ent: missing required field "EmailTemplate.cc_tos"`)}
	}
	if _, ok := etc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "EmailTemplate.subject"`)}
	}
	if _, ok := etc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "EmailTemplate.body"`)}
	}
	if v, ok := etc.mutation.Body(); ok {
		if err := emailtemplate.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.body": %w`, err)}
		}
	}
	return nil
}

func (etc *EmailTemplateCreate) sqlSave(ctx context.Context) (*EmailTemplate, error) {
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (etc *EmailTemplateCreate) createSpec() (*EmailTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailTemplate{config: etc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emailtemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailtemplate.FieldID,
			},
		}
	)
	_spec.OnConflict = etc.conflict
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailtemplate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := etc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailtemplate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := etc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: emailtemplate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := etc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: emailtemplate.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := etc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: emailtemplate.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := etc.mutation.DefaultToUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailtemplate.FieldDefaultToUsername,
		})
		_node.DefaultToUsername = value
	}
	if value, ok := etc.mutation.UsedFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailtemplate.FieldUsedFor,
		})
		_node.UsedFor = value
	}
	if value, ok := etc.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailtemplate.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := etc.mutation.ReplyTos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: emailtemplate.FieldReplyTos,
		})
		_node.ReplyTos = value
	}
	if value, ok := etc.mutation.CcTos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: emailtemplate.FieldCcTos,
		})
		_node.CcTos = value
	}
	if value, ok := etc.mutation.Subject(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailtemplate.FieldSubject,
		})
		_node.Subject = value
	}
	if value, ok := etc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emailtemplate.FieldBody,
		})
		_node.Body = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (etc *EmailTemplateCreate) OnConflict(opts ...sql.ConflictOption) *EmailTemplateUpsertOne {
	etc.conflict = opts
	return &EmailTemplateUpsertOne{
		create: etc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (etc *EmailTemplateCreate) OnConflictColumns(columns ...string) *EmailTemplateUpsertOne {
	etc.conflict = append(etc.conflict, sql.ConflictColumns(columns...))
	return &EmailTemplateUpsertOne{
		create: etc,
	}
}

type (
	// EmailTemplateUpsertOne is the builder for "upsert"-ing
	//  one EmailTemplate node.
	EmailTemplateUpsertOne struct {
		create *EmailTemplateCreate
	}

	// EmailTemplateUpsert is the "OnConflict" setter.
	EmailTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *EmailTemplateUpsert) SetCreatedAt(v uint32) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateCreatedAt() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EmailTemplateUpsert) AddCreatedAt(v uint32) *EmailTemplateUpsert {
	u.Add(emailtemplate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsert) SetUpdatedAt(v uint32) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateUpdatedAt() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EmailTemplateUpsert) AddUpdatedAt(v uint32) *EmailTemplateUpsert {
	u.Add(emailtemplate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailTemplateUpsert) SetDeletedAt(v uint32) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateDeletedAt() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EmailTemplateUpsert) AddDeletedAt(v uint32) *EmailTemplateUpsert {
	u.Add(emailtemplate.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *EmailTemplateUpsert) SetAppID(v uuid.UUID) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateAppID() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *EmailTemplateUpsert) SetLangID(v uuid.UUID) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateLangID() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldLangID)
	return u
}

// SetDefaultToUsername sets the "default_to_username" field.
func (u *EmailTemplateUpsert) SetDefaultToUsername(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldDefaultToUsername, v)
	return u
}

// UpdateDefaultToUsername sets the "default_to_username" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateDefaultToUsername() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldDefaultToUsername)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *EmailTemplateUpsert) SetUsedFor(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateUsedFor() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldUsedFor)
	return u
}

// SetSender sets the "sender" field.
func (u *EmailTemplateUpsert) SetSender(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldSender, v)
	return u
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateSender() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldSender)
	return u
}

// SetReplyTos sets the "reply_tos" field.
func (u *EmailTemplateUpsert) SetReplyTos(v []string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldReplyTos, v)
	return u
}

// UpdateReplyTos sets the "reply_tos" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateReplyTos() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldReplyTos)
	return u
}

// SetCcTos sets the "cc_tos" field.
func (u *EmailTemplateUpsert) SetCcTos(v []string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldCcTos, v)
	return u
}

// UpdateCcTos sets the "cc_tos" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateCcTos() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldCcTos)
	return u
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsert) SetSubject(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateSubject() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldSubject)
	return u
}

// SetBody sets the "body" field.
func (u *EmailTemplateUpsert) SetBody(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateBody() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldBody)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EmailTemplateUpsertOne) UpdateNewValues() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(emailtemplate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EmailTemplate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EmailTemplateUpsertOne) Ignore() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailTemplateUpsertOne) DoNothing() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailTemplateCreate.OnConflict
// documentation for more info.
func (u *EmailTemplateUpsertOne) Update(set func(*EmailTemplateUpsert)) *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EmailTemplateUpsertOne) SetCreatedAt(v uint32) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EmailTemplateUpsertOne) AddCreatedAt(v uint32) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateCreatedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsertOne) SetUpdatedAt(v uint32) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EmailTemplateUpsertOne) AddUpdatedAt(v uint32) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateUpdatedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailTemplateUpsertOne) SetDeletedAt(v uint32) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EmailTemplateUpsertOne) AddDeletedAt(v uint32) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateDeletedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *EmailTemplateUpsertOne) SetAppID(v uuid.UUID) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateAppID() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *EmailTemplateUpsertOne) SetLangID(v uuid.UUID) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateLangID() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetDefaultToUsername sets the "default_to_username" field.
func (u *EmailTemplateUpsertOne) SetDefaultToUsername(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetDefaultToUsername(v)
	})
}

// UpdateDefaultToUsername sets the "default_to_username" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateDefaultToUsername() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateDefaultToUsername()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *EmailTemplateUpsertOne) SetUsedFor(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateUsedFor() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSender sets the "sender" field.
func (u *EmailTemplateUpsertOne) SetSender(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateSender() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSender()
	})
}

// SetReplyTos sets the "reply_tos" field.
func (u *EmailTemplateUpsertOne) SetReplyTos(v []string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetReplyTos(v)
	})
}

// UpdateReplyTos sets the "reply_tos" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateReplyTos() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateReplyTos()
	})
}

// SetCcTos sets the "cc_tos" field.
func (u *EmailTemplateUpsertOne) SetCcTos(v []string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetCcTos(v)
	})
}

// UpdateCcTos sets the "cc_tos" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateCcTos() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateCcTos()
	})
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsertOne) SetSubject(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateSubject() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetBody sets the "body" field.
func (u *EmailTemplateUpsertOne) SetBody(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateBody() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateBody()
	})
}

// Exec executes the query.
func (u *EmailTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmailTemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EmailTemplateUpsertOne.ID is not supported by MySQL driver. Use EmailTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmailTemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmailTemplateCreateBulk is the builder for creating many EmailTemplate entities in bulk.
type EmailTemplateCreateBulk struct {
	config
	builders []*EmailTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the EmailTemplate entities in the database.
func (etcb *EmailTemplateCreateBulk) Save(ctx context.Context) ([]*EmailTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EmailTemplate, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = etcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EmailTemplateCreateBulk) SaveX(ctx context.Context) []*EmailTemplate {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EmailTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EmailTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (etcb *EmailTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmailTemplateUpsertBulk {
	etcb.conflict = opts
	return &EmailTemplateUpsertBulk{
		create: etcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (etcb *EmailTemplateCreateBulk) OnConflictColumns(columns ...string) *EmailTemplateUpsertBulk {
	etcb.conflict = append(etcb.conflict, sql.ConflictColumns(columns...))
	return &EmailTemplateUpsertBulk{
		create: etcb,
	}
}

// EmailTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of EmailTemplate nodes.
type EmailTemplateUpsertBulk struct {
	create *EmailTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EmailTemplateUpsertBulk) UpdateNewValues() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(emailtemplate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EmailTemplateUpsertBulk) Ignore() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailTemplateUpsertBulk) DoNothing() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *EmailTemplateUpsertBulk) Update(set func(*EmailTemplateUpsert)) *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EmailTemplateUpsertBulk) SetCreatedAt(v uint32) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *EmailTemplateUpsertBulk) AddCreatedAt(v uint32) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateCreatedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsertBulk) SetUpdatedAt(v uint32) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *EmailTemplateUpsertBulk) AddUpdatedAt(v uint32) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateUpdatedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmailTemplateUpsertBulk) SetDeletedAt(v uint32) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *EmailTemplateUpsertBulk) AddDeletedAt(v uint32) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateDeletedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *EmailTemplateUpsertBulk) SetAppID(v uuid.UUID) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateAppID() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *EmailTemplateUpsertBulk) SetLangID(v uuid.UUID) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateLangID() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetDefaultToUsername sets the "default_to_username" field.
func (u *EmailTemplateUpsertBulk) SetDefaultToUsername(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetDefaultToUsername(v)
	})
}

// UpdateDefaultToUsername sets the "default_to_username" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateDefaultToUsername() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateDefaultToUsername()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *EmailTemplateUpsertBulk) SetUsedFor(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateUsedFor() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSender sets the "sender" field.
func (u *EmailTemplateUpsertBulk) SetSender(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateSender() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSender()
	})
}

// SetReplyTos sets the "reply_tos" field.
func (u *EmailTemplateUpsertBulk) SetReplyTos(v []string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetReplyTos(v)
	})
}

// UpdateReplyTos sets the "reply_tos" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateReplyTos() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateReplyTos()
	})
}

// SetCcTos sets the "cc_tos" field.
func (u *EmailTemplateUpsertBulk) SetCcTos(v []string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetCcTos(v)
	})
}

// UpdateCcTos sets the "cc_tos" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateCcTos() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateCcTos()
	})
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsertBulk) SetSubject(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateSubject() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetBody sets the "body" field.
func (u *EmailTemplateUpsertBulk) SetBody(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateBody() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateBody()
	})
}

// Exec executes the query.
func (u *EmailTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmailTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
